{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a bilingual (English/Arabic) recipe management web application called \"Family Nesting\". The application allows users to browse, search, filter, add, edit, and view detailed information about recipes with family-based synchronization. It features a comprehensive recipe system with support for ingredients, cooking instructions, tools, ratings, images, video links, cultural information, and email-based family sync where the app name dynamically changes to \"(Family Name) Nesting\" when users join a family group.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and RTL/LTR support\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Internationalization**: Custom context-based i18n system supporting English and Arabic with RTL layout support\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with CRUD operations for recipes\n- **Validation**: Zod schemas for request/response validation\n- **Development**: In-memory storage for development with interface for easy database migration\n\n## Data Storage\n- **ORM**: Drizzle ORM configured for PostgreSQL\n- **Database**: PostgreSQL (configured via Neon Database)\n- **Schema**: Comprehensive recipe schema with bilingual support\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n\n## Key Features\n- **Bilingual Support**: Complete Arabic and English localization with RTL/LTR layout switching\n- **Recipe Management**: Full CRUD operations with rich metadata including ratings, categories, and cultural information\n- **Search & Filtering**: Advanced search by name, ingredients, country, serving temperature, and category\n- **Media Support**: Image galleries and video links for cooking instructions\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n## Database Schema\nThe recipe schema includes:\n- Bilingual text fields (name, description, instructions in both English and Arabic)\n- Structured ingredient lists with amounts\n- Tool requirements\n- Cultural metadata (country, serving temperature)\n- Rating system\n- Media attachments (images, video URLs)\n- Categorization and timestamps\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form, TanStack Query\n- **UI Framework**: Radix UI components, shadcn/ui, Tailwind CSS\n- **Build Tools**: Vite, TypeScript, PostCSS, Autoprefixer\n\n## Backend Dependencies\n- **Server**: Express.js, Node.js TypeScript execution (tsx)\n- **Database**: Drizzle ORM, Neon Database serverless PostgreSQL\n- **Validation**: Zod for schema validation\n- **Session**: Connect-pg-simple for session management\n\n## Development Tools\n- **Replit Integration**: Vite plugins for Replit development environment\n- **Icons**: Lucide React for consistent iconography\n- **Utilities**: clsx, class-variance-authority for styling utilities\n- **Date Handling**: date-fns for date manipulation\n\n## Production Considerations\n- **Bundle Output**: Separate client (Vite) and server (esbuild) build processes\n- **Static Assets**: Vite handles client-side assets, Express serves the built application\n- **Environment**: NODE_ENV-based configuration for development/production modes","size_bytes":3732},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        arabic: [\"var(--font-arabic)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2795},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"public/sw.js":{"content":"// Service Worker for Kitchen App PWA\nconst CACHE_NAME = 'kitchen-app-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/icon-192.png',\n  '/icon-512.png',\n  '/manifest.json'\n];\n\n// Install event\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\n// Fetch event\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\n// Activate event\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});","size_bytes":1006},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertRecipeSchema, insertShoppingListSchema, insertPantrySchema, insertToolsListSchema, insertUserSchema, insertFamilyGroupSchema } from \"@shared/schema\";\n\n// Store connected clients for real-time sync\nconst connectedClients = new Set<WebSocket>();\n\n// Broadcast changes to all connected clients\nfunction broadcastChange(type: string, action: string, data: any) {\n  const message = JSON.stringify({ type, action, data, timestamp: Date.now() });\n  \n  connectedClients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(message);\n    }\n  });\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.get(\"/api/users/email/:email\", async (req, res) => {\n    try {\n      const user = await storage.getUserByEmail(req.params.email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  // Family Group routes\n  app.get(\"/api/family-groups/:id\", async (req, res) => {\n    try {\n      const group = await storage.getFamilyGroup(req.params.id);\n      if (!group) {\n        return res.status(404).json({ message: \"Family group not found\" });\n      }\n      res.json(group);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch family group\" });\n    }\n  });\n\n  app.get(\"/api/family-groups/invite/:code\", async (req, res) => {\n    try {\n      const group = await storage.getFamilyGroupByInviteCode(req.params.code);\n      if (!group) {\n        return res.status(404).json({ message: \"Invalid invite code\" });\n      }\n      res.json(group);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch family group\" });\n    }\n  });\n\n  app.get(\"/api/family-groups/:id/members\", async (req, res) => {\n    try {\n      const members = await storage.getUsersByFamilyGroup(req.params.id);\n      res.json(members);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch family members\" });\n    }\n  });\n\n  app.post(\"/api/family-groups\", async (req, res) => {\n    try {\n      const validatedData = insertFamilyGroupSchema.parse(req.body);\n      const group = await storage.createFamilyGroup(validatedData);\n      res.status(201).json(group);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid family group data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create family group\" });\n    }\n  });\n\n  app.post(\"/api/family-groups/:id/join\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      await storage.joinFamilyGroup(userId, req.params.id);\n      res.json({ message: \"Successfully joined family group\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to join family group\" });\n    }\n  });\n\n  // Get all recipes\n  app.get(\"/api/recipes\", async (req, res) => {\n    try {\n      const { search, country, servingTemperature, category, rating, familyGroupId } = req.query;\n      \n      let recipes;\n      if (search) {\n        recipes = await storage.searchRecipes(search as string, familyGroupId as string);\n      } else if (country || servingTemperature || category || rating) {\n        recipes = await storage.filterRecipes({\n          country: country as string,\n          servingTemperature: servingTemperature as string,\n          category: category as string,\n          rating: rating ? parseInt(rating as string) : undefined,\n        }, familyGroupId as string);\n      } else {\n        recipes = await storage.getAllRecipes(familyGroupId as string);\n      }\n      \n      res.json(recipes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recipes\" });\n    }\n  });\n\n  // Get recipe by ID\n  app.get(\"/api/recipes/:id\", async (req, res) => {\n    try {\n      const recipe = await storage.getRecipeById(req.params.id);\n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      res.json(recipe);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch recipe\" });\n    }\n  });\n\n  // Create new recipe\n  app.post(\"/api/recipes\", async (req, res) => {\n    try {\n      const validatedData = insertRecipeSchema.parse(req.body);\n      const recipe = await storage.createRecipe(validatedData);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('recipes', 'create', recipe);\n      \n      res.status(201).json(recipe);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid recipe data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create recipe\" });\n    }\n  });\n\n  // Update recipe\n  app.put(\"/api/recipes/:id\", async (req, res) => {\n    try {\n      const validatedData = insertRecipeSchema.partial().parse(req.body);\n      const recipe = await storage.updateRecipe(req.params.id, validatedData);\n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('recipes', 'update', recipe);\n      \n      res.json(recipe);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid recipe data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to update recipe\" });\n    }\n  });\n\n  // Patch recipe (for partial updates like rating)\n  app.patch(\"/api/recipes/:id\", async (req, res) => {\n    try {\n      const validatedData = insertRecipeSchema.partial().parse(req.body);\n      const recipe = await storage.updateRecipe(req.params.id, validatedData);\n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('recipes', 'update', recipe);\n      \n      res.json(recipe);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid recipe data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to update recipe\" });\n    }\n  });\n\n  // Delete recipe\n  app.delete(\"/api/recipes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteRecipe(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('recipes', 'delete', { id: req.params.id });\n      \n      res.json({ message: \"Recipe deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete recipe\" });\n    }\n  });\n\n  // Shopping List Routes\n  app.get(\"/api/shopping\", async (req, res) => {\n    try {\n      // Get user info from query params (sent by frontend)\n      const familyGroupId = req.query.familyGroupId as string;\n      const items = await storage.getAllShoppingItems(familyGroupId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch shopping list\" });\n    }\n  });\n\n  app.post(\"/api/shopping\", async (req, res) => {\n    try {\n      const validatedData = insertShoppingListSchema.parse(req.body);\n      const item = await storage.createShoppingItem(validatedData);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('shopping', 'create', item);\n      \n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid shopping item data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create shopping item\" });\n    }\n  });\n\n  app.put(\"/api/shopping/:id\", async (req, res) => {\n    try {\n      const validatedData = insertShoppingListSchema.partial().parse(req.body);\n      const item = await storage.updateShoppingItem(req.params.id, validatedData);\n      if (!item) {\n        return res.status(404).json({ message: \"Shopping item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('shopping', 'update', item);\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update shopping item\" });\n    }\n  });\n\n  app.delete(\"/api/shopping/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteShoppingItem(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Shopping item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('shopping', 'delete', { id: req.params.id });\n      \n      res.json({ message: \"Shopping item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete shopping item\" });\n    }\n  });\n\n  // Add recipe ingredients and tools to shopping list with serving adjustments\n  app.post(\"/api/shopping/recipe\", async (req, res) => {\n    try {\n      const { recipeId, selectedRecipes = [0], people = 4, days = 1 } = req.body;\n      const recipe = await storage.getRecipeById(recipeId);\n      \n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n\n      const itemsAdded = [];\n      const toolsAdded = [];\n      let overallMultiplier = 1;\n      let baseOriginalServings = recipe.servings || 4;\n\n      // Process each selected recipe (main + additional recipes)\n      for (const recipeIndex of selectedRecipes) {\n        let currentIngredients, currentTools, originalServings = 4;\n        \n        if (recipeIndex === 0) {\n          // Main recipe\n          currentIngredients = recipe.ingredientsEn;\n          currentTools = recipe.toolsEn;\n          originalServings = recipe.servings || 4;\n        } else {\n          // Additional recipe (recipeIndex - 1 because array is 0-indexed)\n          const additionalRecipe = recipe.additionalRecipes?.[recipeIndex - 1];\n          if (additionalRecipe) {\n            currentIngredients = additionalRecipe.ingredientsEn;\n            currentTools = additionalRecipe.toolsEn;\n            originalServings = additionalRecipe.servings || 4;\n          }\n        }\n\n        // Calculate serving multiplier\n        const totalServingsNeeded = people * days;\n        const multiplier = totalServingsNeeded / originalServings;\n        overallMultiplier = multiplier; // Store for response\n\n        // Add ingredients to shopping list with adjusted quantities\n        if (currentIngredients) {\n          for (const ingredient of currentIngredients) {\n            if (ingredient.name.trim()) {\n              // Parse amount and multiply by serving adjustment\n              const amountStr = ingredient.amount || '1';\n              const amountMatch = amountStr.match(/^(\\d+\\.?\\d*)\\s*(.*)$/);\n              let adjustedAmount = amountStr;\n              \n              if (amountMatch) {\n                const amount = parseFloat(amountMatch[1]);\n                const unit = amountMatch[2].trim();\n                const adjustedValue = (amount * multiplier).toFixed(1).replace(/\\.0$/, '');\n                adjustedAmount = `${adjustedValue} ${unit}`;\n              }\n\n              const shoppingItem = await storage.createShoppingItem({\n                itemNameEn: ingredient.name,\n                itemNameAr: ingredient.name, // Using English name for both for now\n                quantity: adjustedAmount,\n                unit: 'piece',\n                category: 'other',\n                notes: `For ${people} people × ${days} days (×${multiplier.toFixed(1)})`,\n                familyGroupId: recipe.familyGroupId\n              });\n              itemsAdded.push(shoppingItem);\n            }\n          }\n        }\n\n        // Add tools to tools list (tools don't need multiplying)\n        if (currentTools) {\n          for (const tool of currentTools) {\n            if (tool.trim()) {\n              const toolItem = await storage.createToolsItem({\n                toolNameEn: tool,\n                toolNameAr: tool, // Using English name for both for now\n                isAvailable: false,\n                notes: `For recipe serving ${people} people`,\n                familyGroupId: recipe.familyGroupId\n              });\n              toolsAdded.push(toolItem);\n            }\n          }\n        }\n      }\n\n      // Broadcast changes\n      for (const item of itemsAdded) {\n        broadcastChange('shopping', 'create', item);\n      }\n      for (const tool of toolsAdded) {\n        broadcastChange('tools', 'create', tool);\n      }\n      \n      res.json({ \n        message: \"Recipe added to lists\", \n        itemsAdded: itemsAdded.length,\n        toolsAdded: toolsAdded.length,\n        multiplier: overallMultiplier.toFixed(1),\n        originalServings: baseOriginalServings,\n        adjustedFor: `${people} people × ${days} days`\n      });\n    } catch (error) {\n      console.error('Error adding recipe to shopping list:', error);\n      res.status(500).json({ message: \"Failed to add recipe to shopping list\" });\n    }\n  });\n\n  app.patch(\"/api/shopping/:id/toggle\", async (req, res) => {\n    try {\n      const item = await storage.toggleShoppingItemCompleted(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Shopping item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('shopping', 'toggle', item);\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle shopping item\" });\n    }\n  });\n\n  // Mark shopping item as bought and move to pantry\n  app.post(\"/api/shopping/:id/buy\", async (req, res) => {\n    try {\n      const result = await storage.markShoppingItemAsBought(req.params.id);\n      if (!result) {\n        return res.status(404).json({ message: \"Shopping item not found\" });\n      }\n      \n      // Broadcast the changes to all connected clients\n      broadcastChange('shopping', 'delete', { id: req.params.id });\n      broadcastChange('pantry', 'create', result.pantryItem);\n      \n      res.json({ message: \"Item moved to pantry successfully\", pantryItem: result.pantryItem });\n    } catch (error) {\n      console.error(\"Failed to mark item as bought:\", error);\n      res.status(500).json({ message: \"Failed to mark item as bought\" });\n    }\n  });\n\n  app.delete(\"/api/shopping/completed\", async (req, res) => {\n    try {\n      const familyGroupId = req.query.familyGroupId as string;\n      await storage.clearCompletedShoppingItems(familyGroupId);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('shopping', 'clear-completed', {});\n      \n      res.json({ message: \"Completed items cleared successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear completed items\" });\n    }\n  });\n\n  // Pantry Routes\n  app.get(\"/api/pantry\", async (req, res) => {\n    try {\n      const familyGroupId = req.query.familyGroupId as string;\n      const items = await storage.getAllPantryItems(familyGroupId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pantry items\" });\n    }\n  });\n\n  app.get(\"/api/pantry/low-stock\", async (req, res) => {\n    try {\n      const items = await storage.getLowStockItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  app.get(\"/api/pantry/expiring-soon\", async (req, res) => {\n    try {\n      const items = await storage.getExpiringSoonItems();\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch expiring items\" });\n    }\n  });\n\n  app.post(\"/api/pantry\", async (req, res) => {\n    try {\n      const validatedData = insertPantrySchema.parse(req.body);\n      const item = await storage.createPantryItem(validatedData);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('pantry', 'create', item);\n      \n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid pantry item data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create pantry item\" });\n    }\n  });\n\n  app.put(\"/api/pantry/:id\", async (req, res) => {\n    try {\n      const validatedData = insertPantrySchema.partial().parse(req.body);\n      const item = await storage.updatePantryItem(req.params.id, validatedData);\n      if (!item) {\n        return res.status(404).json({ message: \"Pantry item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('pantry', 'update', item);\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update pantry item\" });\n    }\n  });\n\n  app.delete(\"/api/pantry/:id\", async (req, res) => {\n    try {\n      const success = await storage.deletePantryItem(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Pantry item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('pantry', 'delete', { id: req.params.id });\n      \n      res.json({ message: \"Pantry item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete pantry item\" });\n    }\n  });\n\n  // Tools List Routes\n  app.get(\"/api/tools\", async (req, res) => {\n    try {\n      const familyGroupId = req.query.familyGroupId as string;\n      const items = await storage.getAllToolsItems(familyGroupId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tools list\" });\n    }\n  });\n\n  app.post(\"/api/tools\", async (req, res) => {\n    try {\n      const validatedData = insertToolsListSchema.parse(req.body);\n      const item = await storage.createToolsItem(validatedData);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('tools', 'create', item);\n      \n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid tools item data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create tools item\" });\n    }\n  });\n\n  app.put(\"/api/tools/:id\", async (req, res) => {\n    try {\n      const validatedData = insertToolsListSchema.partial().parse(req.body);\n      const item = await storage.updateToolsItem(req.params.id, validatedData);\n      if (!item) {\n        return res.status(404).json({ message: \"Tools item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('tools', 'update', item);\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update tools item\" });\n    }\n  });\n\n  app.delete(\"/api/tools/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteToolsItem(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Tools item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('tools', 'delete', { id: req.params.id });\n      \n      res.json({ message: \"Tools item deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete tools item\" });\n    }\n  });\n\n  app.patch(\"/api/tools/:id/toggle\", async (req, res) => {\n    try {\n      const item = await storage.toggleToolsItemAvailable(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Tools item not found\" });\n      }\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('tools', 'toggle', item);\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle tools item\" });\n    }\n  });\n\n  app.delete(\"/api/tools/available\", async (req, res) => {\n    try {\n      const familyGroupId = req.query.familyGroupId as string;\n      await storage.clearAvailableToolsItems(familyGroupId);\n      \n      // Broadcast the change to all connected clients\n      broadcastChange('tools', 'clear-available', {});\n      \n      res.json({ message: \"Available tools cleared successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear available tools\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Setup WebSocket server for real-time sync\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('New WebSocket client connected');\n    connectedClients.add(ws);\n    \n    // Send welcome message\n    ws.send(JSON.stringify({ \n      type: 'system', \n      action: 'connected', \n      data: { message: 'Connected to real-time sync' },\n      timestamp: Date.now()\n    }));\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n      connectedClients.delete(ws);\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      connectedClients.delete(ws);\n    });\n  });\n  \n  return httpServer;\n}\n","size_bytes":22477},"server/storage.ts":{"content":"import { \n  recipes, \n  shoppingList, \n  pantry, \n  toolsList,\n  users, \n  familyGroups,\n  type Recipe, \n  type InsertRecipe, \n  type ShoppingListItem, \n  type InsertShoppingListItem,\n  type PantryItem,\n  type InsertPantryItem,\n  type ToolsListItem,\n  type InsertToolsListItem,\n  type User,\n  type InsertUser,\n  type FamilyGroup,\n  type InsertFamilyGroup\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, like, or, sql, isNull } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Family Group operations\n  getFamilyGroup(id: string): Promise<FamilyGroup | undefined>;\n  getFamilyGroupByInviteCode(code: string): Promise<FamilyGroup | undefined>;\n  createFamilyGroup(group: InsertFamilyGroup): Promise<FamilyGroup>;\n  joinFamilyGroup(userId: string, familyGroupId: string): Promise<void>;\n  getUsersByFamilyGroup(familyGroupId: string): Promise<User[]>;\n  \n  // Recipe operations (family-scoped)\n  getAllRecipes(familyGroupId?: string): Promise<Recipe[]>;\n  getRecipeById(id: string): Promise<Recipe | undefined>;\n  createRecipe(recipe: InsertRecipe): Promise<Recipe>;\n  updateRecipe(id: string, recipe: Partial<InsertRecipe>): Promise<Recipe | undefined>;\n  deleteRecipe(id: string): Promise<boolean>;\n  searchRecipes(query: string, familyGroupId?: string): Promise<Recipe[]>;\n  filterRecipes(filters: any, familyGroupId?: string): Promise<Recipe[]>;\n  \n  // Shopping list operations (family-scoped)\n  getAllShoppingItems(familyGroupId?: string): Promise<ShoppingListItem[]>;\n  getShoppingItemById(id: string): Promise<ShoppingListItem | undefined>;\n  createShoppingItem(item: InsertShoppingListItem): Promise<ShoppingListItem>;\n  updateShoppingItem(id: string, item: Partial<InsertShoppingListItem>): Promise<ShoppingListItem | undefined>;\n  deleteShoppingItem(id: string): Promise<boolean>;\n  \n  // Pantry operations (family-scoped)\n  getAllPantryItems(familyGroupId?: string): Promise<PantryItem[]>;\n  getPantryItemById(id: string): Promise<PantryItem | undefined>;\n  createPantryItem(item: InsertPantryItem): Promise<PantryItem>;\n  updatePantryItem(id: string, item: Partial<InsertPantryItem>): Promise<PantryItem | undefined>;\n  deletePantryItem(id: string): Promise<boolean>;\n  \n  // Tools list operations (family-scoped)\n  getAllToolsItems(familyGroupId?: string): Promise<ToolsListItem[]>;\n  getToolsItemById(id: string): Promise<ToolsListItem | undefined>;\n  createToolsItem(item: InsertToolsListItem): Promise<ToolsListItem>;\n  updateToolsItem(id: string, item: Partial<InsertToolsListItem>): Promise<ToolsListItem | undefined>;\n  deleteToolsItem(id: string): Promise<boolean>;\n  toggleToolsItemAvailable(id: string): Promise<ToolsListItem | undefined>;\n  clearAvailableToolsItems(familyGroupId?: string): Promise<boolean>;\n  \n  // Additional shopping list operations\n  toggleShoppingItemCompleted(id: string): Promise<ShoppingListItem | undefined>;\n  clearCompletedShoppingItems(familyGroupId?: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Family Group operations\n  async getFamilyGroup(id: string): Promise<FamilyGroup | undefined> {\n    const [group] = await db.select().from(familyGroups).where(eq(familyGroups.id, id));\n    return group;\n  }\n\n  async getFamilyGroupByInviteCode(code: string): Promise<FamilyGroup | undefined> {\n    const [group] = await db.select().from(familyGroups).where(eq(familyGroups.inviteCode, code));\n    return group;\n  }\n\n  async createFamilyGroup(groupData: InsertFamilyGroup): Promise<FamilyGroup> {\n    const inviteCode = Math.random().toString(36).substring(2, 8).toUpperCase();\n    const [group] = await db\n      .insert(familyGroups)\n      .values({ ...groupData, inviteCode })\n      .returning();\n    return group;\n  }\n\n  async joinFamilyGroup(userId: string, familyGroupId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ familyGroupId, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async getUsersByFamilyGroup(familyGroupId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.familyGroupId, familyGroupId));\n  }\n\n  // Recipe operations\n  async getAllRecipes(familyGroupId?: string): Promise<Recipe[]> {\n    if (familyGroupId) {\n      return await db.select().from(recipes).where(eq(recipes.familyGroupId, familyGroupId));\n    }\n    // Return all recipes when no family group is specified\n    return await db.select().from(recipes);\n  }\n\n  async getRecipeById(id: string): Promise<Recipe | undefined> {\n    const [recipe] = await db.select().from(recipes).where(eq(recipes.id, id));\n    return recipe;\n  }\n\n  async createRecipe(recipeData: InsertRecipe): Promise<Recipe> {\n    const [recipe] = await db\n      .insert(recipes)\n      .values(recipeData)\n      .returning();\n    return recipe;\n  }\n\n  async updateRecipe(id: string, recipeData: Partial<InsertRecipe>): Promise<Recipe | undefined> {\n    const updateData: any = { ...recipeData, updatedAt: new Date() };\n    const [recipe] = await db\n      .update(recipes)\n      .set(updateData)\n      .where(eq(recipes.id, id))\n      .returning();\n    return recipe;\n  }\n\n  async deleteRecipe(id: string): Promise<boolean> {\n    const result = await db.delete(recipes).where(eq(recipes.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async searchRecipes(query: string, familyGroupId?: string): Promise<Recipe[]> {\n    const conditions = [\n      or(\n        like(recipes.nameEn, `%${query}%`),\n        like(recipes.nameAr, `%${query}%`),\n        like(recipes.descriptionEn, `%${query}%`),\n        like(recipes.descriptionAr, `%${query}%`)\n      )\n    ];\n    \n    if (familyGroupId) {\n      conditions.push(eq(recipes.familyGroupId, familyGroupId));\n    }\n    \n    return await db\n      .select()\n      .from(recipes)\n      .where(and(...conditions));\n  }\n\n  async filterRecipes(filters: any, familyGroupId?: string): Promise<Recipe[]> {\n    const conditions = [];\n    \n    if (familyGroupId) {\n      conditions.push(eq(recipes.familyGroupId, familyGroupId));\n    }\n    \n    if (filters.country) conditions.push(eq(recipes.country, filters.country));\n    if (filters.servingTemperature) conditions.push(eq(recipes.servingTemperature, filters.servingTemperature));\n    if (filters.category) conditions.push(eq(recipes.category, filters.category));\n    if (filters.rating) conditions.push(eq(recipes.rating, filters.rating));\n\n    return await db.select().from(recipes).where(and(...conditions));\n  }\n\n  // Shopping list operations\n  async getAllShoppingItems(familyGroupId?: string): Promise<ShoppingListItem[]> {\n    if (familyGroupId && familyGroupId !== '') {\n      return await db.select().from(shoppingList).where(eq(shoppingList.familyGroupId, familyGroupId));\n    }\n    return await db.select().from(shoppingList).where(isNull(shoppingList.familyGroupId));\n  }\n\n  async getShoppingItemById(id: string): Promise<ShoppingListItem | undefined> {\n    const [item] = await db.select().from(shoppingList).where(eq(shoppingList.id, id));\n    return item;\n  }\n\n  async createShoppingItem(itemData: InsertShoppingListItem): Promise<ShoppingListItem> {\n    // Check if similar item already exists (same name and family group)\n    const existingItems = await db.select()\n      .from(shoppingList)\n      .where(\n        and(\n          or(\n            and(\n              sql`LOWER(TRIM(${shoppingList.itemNameEn})) = LOWER(TRIM(${itemData.itemNameEn}))`,\n              sql`LENGTH(TRIM(${itemData.itemNameEn})) > 0`\n            ),\n            and(\n              sql`LOWER(TRIM(${shoppingList.itemNameAr})) = LOWER(TRIM(${itemData.itemNameAr}))`,\n              sql`LENGTH(TRIM(${itemData.itemNameAr || ''})) > 0`\n            )\n          ),\n          eq(shoppingList.familyGroupId, itemData.familyGroupId || sql`NULL`),\n          eq(shoppingList.isCompleted, false)\n        )\n      );\n\n    if (existingItems.length > 0) {\n      // Merge with existing item\n      const existingItem = existingItems[0];\n      \n      // Parse quantities and combine them\n      const existingQty = this.parseQuantity(existingItem.quantity);\n      const newQty = this.parseQuantity(itemData.quantity);\n      \n      // Try to merge units if compatible\n      let combinedQuantity: string;\n      let combinedNotes = existingItem.notes || '';\n      \n      if (this.canMergeUnits(existingQty.unit, newQty.unit)) {\n        const merged = this.convertAndMergeUnits(existingQty.amount, existingQty.unit, newQty.amount, newQty.unit);\n        combinedQuantity = `${merged.amount} ${merged.unit}`;\n        \n        // Clean up notes - only keep the recipe sources, remove the old additions\n        const recipeNotes = existingItem.notes?.split(',').filter(note => \n          note.trim().startsWith('From recipe:')\n        ).join(', ') || '';\n        \n        combinedNotes = itemData.notes ? \n          (recipeNotes ? `${recipeNotes}, ${itemData.notes}` : itemData.notes) : \n          recipeNotes;\n      } else {\n        combinedQuantity = existingItem.quantity;\n        const newQuantityNote = `+ ${itemData.quantity}`;\n        combinedNotes = combinedNotes ? `${combinedNotes}, ${newQuantityNote}` : newQuantityNote;\n      }\n      \n      // Update existing item with combined quantity and notes\n      const merged = this.canMergeUnits(existingQty.unit, newQty.unit) ? \n        this.convertAndMergeUnits(existingQty.amount, existingQty.unit, newQty.amount, newQty.unit) : \n        { unit: existingItem.unit };\n        \n      const [updatedItem] = await db\n        .update(shoppingList)\n        .set({\n          quantity: combinedQuantity,\n          unit: merged.unit,\n          notes: combinedNotes,\n          updatedAt: new Date()\n        })\n        .where(eq(shoppingList.id, existingItem.id))\n        .returning();\n      \n      return updatedItem;\n    } else {\n      // Create new item\n      const [item] = await db\n        .insert(shoppingList)\n        .values(itemData)\n        .returning();\n      return item;\n    }\n  }\n\n  private parseQuantity(quantity: string): { amount: number; unit: string } {\n    const match = quantity.match(/^(\\d*\\.?\\d+)\\s*(.*)$/);\n    if (!match) {\n      return { amount: 1, unit: 'piece' };\n    }\n    \n    const amount = parseFloat(match[1]) || 1;\n    let unit = match[2]?.trim() || 'piece';\n    \n    // Normalize common units\n    const unitNormalization: Record<string, string> = {\n      'g': 'gram',\n      'grams': 'gram',\n      'جرام': 'gram',\n      'جم': 'gram',\n      'kg': 'kg',\n      'كيلو': 'kg',\n      'كيلوجرام': 'kg',\n      'ml': 'ml',\n      'مل': 'ml',\n      'liter': 'liter',\n      'لتر': 'liter',\n      'l': 'liter',\n      'cup': 'cup',\n      'cups': 'cup',\n      'كوب': 'cup',\n      'piece': 'piece',\n      'pieces': 'piece',\n      'قطعة': 'piece',\n      'حبة': 'piece'\n    };\n    \n    unit = unitNormalization[unit.toLowerCase()] || unit;\n    \n    return { amount, unit };\n  }\n\n  private canMergeUnits(unit1: string, unit2: string): boolean {\n    // Units that can be converted to grams (dry ingredients)\n    const dryUnits = ['gram', 'kg', 'كيلو', 'كيلوجرام', 'cup', 'كوب', 'tablespoon', 'ملعقة كبيرة', 'teaspoon', 'ملعقة صغيرة'];\n    \n    // Units that can be converted to ml (liquids)\n    const liquidUnits = ['ml', 'مل', 'liter', 'لتر', 'cup', 'كوب', 'tablespoon', 'ملعقة كبيرة', 'teaspoon', 'ملعقة صغيرة'];\n    \n    // Counting units\n    const countUnits = ['piece', 'pieces', 'قطعة', 'قطع', 'حبة', 'حبات'];\n    \n    // Check if both units are in the same category\n    const bothDry = dryUnits.includes(unit1) && dryUnits.includes(unit2);\n    const bothLiquid = liquidUnits.includes(unit1) && liquidUnits.includes(unit2);\n    const bothCount = countUnits.includes(unit1) && countUnits.includes(unit2);\n    \n    return bothDry || bothLiquid || bothCount || unit1 === unit2;\n  }\n\n  private convertToGrams(amount: number, unit: string): number | null {\n    // Convert various units to grams for dry ingredients\n    const conversions: Record<string, number> = {\n      'gram': 1,\n      'kg': 1000,\n      'كيلو': 1000,\n      'كيلوجرام': 1000,\n      'cup': 120, // Average for flour/sugar\n      'كوب': 120, // Average for flour/sugar  \n      'tablespoon': 15,\n      'ملعقة كبيرة': 15,\n      'teaspoon': 5,\n      'ملعقة صغيرة': 5\n    };\n    \n    return conversions[unit] ? amount * conversions[unit] : null;\n  }\n\n  private convertToMilliliters(amount: number, unit: string): number | null {\n    // Convert various units to ml for liquids\n    const conversions: Record<string, number> = {\n      'ml': 1,\n      'مل': 1,\n      'liter': 1000,\n      'لتر': 1000,\n      'cup': 240, // Standard cup for liquids\n      'كوب': 240,\n      'tablespoon': 15,\n      'ملعقة كبيرة': 15,\n      'teaspoon': 5,\n      'ملعقة صغيرة': 5\n    };\n    \n    return conversions[unit] ? amount * conversions[unit] : null;\n  }\n\n  private convertAndMergeUnits(amount1: number, unit1: string, amount2: number, unit2: string): { amount: number; unit: string } {\n    // Try converting to grams first (for dry ingredients)\n    const grams1 = this.convertToGrams(amount1, unit1);\n    const grams2 = this.convertToGrams(amount2, unit2);\n    \n    if (grams1 !== null && grams2 !== null) {\n      const totalGrams = grams1 + grams2;\n      \n      // Convert back to kg if amount is large\n      if (totalGrams >= 1000) {\n        return { amount: Math.round((totalGrams / 1000) * 100) / 100, unit: 'kg' };\n      }\n      \n      return { amount: Math.round(totalGrams * 100) / 100, unit: 'gram' };\n    }\n    \n    // Try converting to milliliters (for liquids)\n    const ml1 = this.convertToMilliliters(amount1, unit1);\n    const ml2 = this.convertToMilliliters(amount2, unit2);\n    \n    if (ml1 !== null && ml2 !== null) {\n      const totalMl = ml1 + ml2;\n      \n      // Convert back to liter if amount is large\n      if (totalMl >= 1000) {\n        return { amount: Math.round((totalMl / 1000) * 100) / 100, unit: 'liter' };\n      }\n      \n      return { amount: Math.round(totalMl * 100) / 100, unit: 'ml' };\n    }\n    \n    // Same units - just add\n    if (unit1 === unit2) {\n      return { amount: Math.round((amount1 + amount2) * 100) / 100, unit: unit1 };\n    }\n    \n    // Can't merge - return original\n    return { amount: amount1, unit: unit1 };\n  }\n\n  async updateShoppingItem(id: string, itemData: Partial<InsertShoppingListItem>): Promise<ShoppingListItem | undefined> {\n    const [item] = await db\n      .update(shoppingList)\n      .set({ ...itemData, updatedAt: new Date() })\n      .where(eq(shoppingList.id, id))\n      .returning();\n    return item;\n  }\n\n  async deleteShoppingItem(id: string): Promise<boolean> {\n    const result = await db.delete(shoppingList).where(eq(shoppingList.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async toggleShoppingItemCompleted(id: string): Promise<ShoppingListItem | undefined> {\n    const item = await this.getShoppingItemById(id);\n    if (!item) return undefined;\n\n    const [updatedItem] = await db\n      .update(shoppingList)\n      .set({ isCompleted: !item.isCompleted, updatedAt: new Date() })\n      .where(eq(shoppingList.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async clearCompletedShoppingItems(familyGroupId?: string): Promise<boolean> {\n    const conditions = [eq(shoppingList.isCompleted, true)];\n    \n    if (familyGroupId) {\n      conditions.push(eq(shoppingList.familyGroupId, familyGroupId));\n    } else {\n      conditions.push(eq(shoppingList.familyGroupId, sql`NULL`));\n    }\n    \n    const result = await db\n      .delete(shoppingList)\n      .where(and(...conditions));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Pantry operations\n  async getAllPantryItems(familyGroupId?: string): Promise<PantryItem[]> {\n    if (familyGroupId && familyGroupId !== '') {\n      return await db.select().from(pantry).where(eq(pantry.familyGroupId, familyGroupId));\n    }\n    return await db.select().from(pantry).where(isNull(pantry.familyGroupId));\n  }\n\n  async getPantryItemById(id: string): Promise<PantryItem | undefined> {\n    const [item] = await db.select().from(pantry).where(eq(pantry.id, id));\n    return item;\n  }\n\n  async createPantryItem(itemData: InsertPantryItem): Promise<PantryItem> {\n    const [item] = await db\n      .insert(pantry)\n      .values(itemData)\n      .returning();\n    return item;\n  }\n\n  async updatePantryItem(id: string, itemData: Partial<InsertPantryItem>): Promise<PantryItem | undefined> {\n    const [item] = await db\n      .update(pantry)\n      .set({ ...itemData, updatedAt: new Date() })\n      .where(eq(pantry.id, id))\n      .returning();\n    return item;\n  }\n\n  async deletePantryItem(id: string): Promise<boolean> {\n    const result = await db.delete(pantry).where(eq(pantry.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async markShoppingItemAsBought(id: string): Promise<{ pantryItem: PantryItem } | undefined> {\n    try {\n      // Get the shopping item first\n      const shoppingItem = await this.getShoppingItemById(id);\n      if (!shoppingItem) {\n        return undefined;\n      }\n\n      // Create pantry item from shopping item\n      const pantryData = {\n        itemNameEn: shoppingItem.itemNameEn,\n        itemNameAr: shoppingItem.itemNameAr,\n        quantity: shoppingItem.quantity,\n        unit: shoppingItem.unit,\n        category: shoppingItem.category,\n        notes: shoppingItem.notes,\n        location: 'pantry', // default location\n        familyGroupId: shoppingItem.familyGroupId,\n        createdBy: shoppingItem.createdBy,\n      };\n\n      // Check if similar item already exists in pantry\n      const existingPantryItems = await db\n        .select()\n        .from(pantry)\n        .where(\n          and(\n            eq(pantry.itemNameEn, shoppingItem.itemNameEn),\n            eq(pantry.itemNameAr, shoppingItem.itemNameAr),\n            eq(pantry.unit, shoppingItem.unit || 'piece'),\n            shoppingItem.familyGroupId \n              ? eq(pantry.familyGroupId, shoppingItem.familyGroupId)\n              : eq(pantry.familyGroupId, sql`NULL`)\n          )\n        );\n\n      let pantryItem: PantryItem;\n\n      if (existingPantryItems.length > 0) {\n        // Merge with existing item\n        const existing = existingPantryItems[0];\n        const { amount: existingAmount } = this.parseQuantity(existing.quantity);\n        const { amount: newAmount } = this.parseQuantity(shoppingItem.quantity);\n        const totalAmount = existingAmount + newAmount;\n\n        const [updatedItem] = await db\n          .update(pantry)\n          .set({\n            quantity: `${totalAmount}`,\n            updatedAt: new Date(),\n            notes: existing.notes ? `${existing.notes}; ${shoppingItem.notes || 'Added from shopping list'}` : (shoppingItem.notes || 'Added from shopping list')\n          })\n          .where(eq(pantry.id, existing.id))\n          .returning();\n        \n        pantryItem = updatedItem;\n      } else {\n        // Create new pantry item\n        const [newItem] = await db\n          .insert(pantry)\n          .values({\n            ...pantryData,\n            notes: pantryData.notes || 'Added from shopping list'\n          })\n          .returning();\n        \n        pantryItem = newItem;\n      }\n\n      // Delete from shopping list\n      await db.delete(shoppingList).where(eq(shoppingList.id, id));\n\n      return { pantryItem };\n    } catch (error) {\n      console.error('Error marking shopping item as bought:', error);\n      throw error;\n    }\n  }\n\n  async getLowStockItems(): Promise<PantryItem[]> {\n    // This would require complex SQL for comparing quantities\n    // For now, return empty array and implement client-side filtering\n    return [];\n  }\n\n  async getExpiringSoonItems(): Promise<PantryItem[]> {\n    const sevenDaysFromNow = new Date();\n    sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\n    \n    return await db\n      .select()\n      .from(pantry)\n      .where(\n        and(\n          sql`${pantry.expiryDate} IS NOT NULL`,\n          sql`${pantry.expiryDate} <= ${sevenDaysFromNow.toISOString()}`\n        )\n      );\n  }\n\n  // Tools list operations\n  async getAllToolsItems(familyGroupId?: string): Promise<(ToolsListItem & { recipeCount: number })[]> {\n    let toolsItems: ToolsListItem[];\n    if (familyGroupId && familyGroupId !== '') {\n      toolsItems = await db.select().from(toolsList).where(eq(toolsList.familyGroupId, familyGroupId));\n    } else {\n      toolsItems = await db.select().from(toolsList).where(isNull(toolsList.familyGroupId));\n    }\n\n    // Count how many recipes each tool appears in\n    const toolsWithCount = await Promise.all(\n      toolsItems.map(async (tool) => {\n        const count = await this.countToolInRecipes(tool.toolNameEn, tool.toolNameAr, familyGroupId);\n        return { ...tool, recipeCount: count };\n      })\n    );\n\n    return toolsWithCount;\n  }\n\n  private async countToolInRecipes(toolNameEn: string, toolNameAr: string, familyGroupId?: string): Promise<number> {\n    // Get all recipes for the family group\n    const allRecipes = await this.getAllRecipes(familyGroupId);\n    \n    let count = 0;\n    \n    for (const recipe of allRecipes) {\n      // Check if tool appears in main recipe\n      const toolsEn = Array.isArray(recipe.toolsEn) ? recipe.toolsEn : [];\n      const toolsAr = Array.isArray(recipe.toolsAr) ? recipe.toolsAr : [];\n      \n      if (toolsEn.some(t => t.toLowerCase().trim() === toolNameEn.toLowerCase().trim()) ||\n          toolsAr.some(t => t.toLowerCase().trim() === toolNameAr.toLowerCase().trim())) {\n        count++;\n        continue; // Don't double count for the same recipe\n      }\n      \n      // Check in additional recipes\n      const additionalRecipes = Array.isArray(recipe.additionalRecipes) ? recipe.additionalRecipes : [];\n      for (const additionalRecipe of additionalRecipes) {\n        const addToolsEn = Array.isArray(additionalRecipe.toolsEn) ? additionalRecipe.toolsEn : [];\n        const addToolsAr = Array.isArray(additionalRecipe.toolsAr) ? additionalRecipe.toolsAr : [];\n        \n        if (addToolsEn.some(t => t.toLowerCase().trim() === toolNameEn.toLowerCase().trim()) ||\n            addToolsAr.some(t => t.toLowerCase().trim() === toolNameAr.toLowerCase().trim())) {\n          count++;\n          break; // Found in this recipe, move to next recipe\n        }\n      }\n    }\n    \n    return count;\n  }\n\n  async getToolsItemById(id: string): Promise<ToolsListItem | undefined> {\n    const [item] = await db.select().from(toolsList).where(eq(toolsList.id, id));\n    return item;\n  }\n\n  async createToolsItem(itemData: InsertToolsListItem): Promise<ToolsListItem> {\n    // Check if similar tool already exists (same name and family group)\n    const existingTools = await db.select()\n      .from(toolsList)\n      .where(\n        and(\n          or(\n            and(\n              sql`LOWER(TRIM(${toolsList.toolNameEn})) = LOWER(TRIM(${itemData.toolNameEn}))`,\n              sql`LENGTH(TRIM(${itemData.toolNameEn})) > 0`\n            ),\n            and(\n              sql`LOWER(TRIM(${toolsList.toolNameAr})) = LOWER(TRIM(${itemData.toolNameAr}))`,\n              sql`LENGTH(TRIM(${itemData.toolNameAr || ''})) > 0`\n            )\n          ),\n          itemData.familyGroupId \n            ? eq(toolsList.familyGroupId, itemData.familyGroupId)\n            : isNull(toolsList.familyGroupId)\n        )\n      );\n\n    if (existingTools.length > 0) {\n      // Tool already exists, return the existing one\n      return existingTools[0];\n    }\n\n    // Create new tool\n    const [item] = await db\n      .insert(toolsList)\n      .values(itemData)\n      .returning();\n    return item;\n  }\n\n  async updateToolsItem(id: string, itemData: Partial<InsertToolsListItem>): Promise<ToolsListItem | undefined> {\n    const [item] = await db\n      .update(toolsList)\n      .set({ ...itemData, updatedAt: new Date() })\n      .where(eq(toolsList.id, id))\n      .returning();\n    return item;\n  }\n\n  async deleteToolsItem(id: string): Promise<boolean> {\n    const result = await db.delete(toolsList).where(eq(toolsList.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async toggleToolsItemAvailable(id: string): Promise<ToolsListItem | undefined> {\n    const item = await this.getToolsItemById(id);\n    if (!item) return undefined;\n\n    const [updatedItem] = await db\n      .update(toolsList)\n      .set({ isAvailable: !item.isAvailable, updatedAt: new Date() })\n      .where(eq(toolsList.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async clearAvailableToolsItems(familyGroupId?: string): Promise<boolean> {\n    const conditions = [eq(toolsList.isAvailable, true)];\n    \n    if (familyGroupId) {\n      conditions.push(eq(toolsList.familyGroupId, familyGroupId));\n    } else {\n      conditions.push(eq(toolsList.familyGroupId, sql`NULL`));\n    }\n    \n    const result = await db\n      .delete(toolsList)\n      .where(and(...conditions));\n    return (result.rowCount || 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":26064},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb, timestamp, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table for email-based sync\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  name: varchar(\"name\"),\n  profileImage: varchar(\"profile_image\"),\n  familyGroupId: varchar(\"family_group_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Family groups for shared sync\nexport const familyGroups = pgTable(\"family_groups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  ownerEmail: varchar(\"owner_email\").notNull(),\n  inviteCode: varchar(\"invite_code\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const recipes = pgTable(\"recipes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nameEn: text(\"name_en\").notNull(),\n  nameAr: text(\"name_ar\").notNull(),\n  descriptionEn: text(\"description_en\"),\n  descriptionAr: text(\"description_ar\"),\n  country: text(\"country\").notNull(),\n  servingTemperature: text(\"serving_temperature\").notNull(), // 'hot', 'cold', 'room_temp'\n  calories: integer(\"calories\"),\n  prepTime: integer(\"prep_time\"), // in minutes\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  videoUrl: text(\"video_url\"),\n  ingredientsEn: jsonb(\"ingredients_en\").$type<Array<{name: string, amount: string}>>().default([]),\n  ingredientsAr: jsonb(\"ingredients_ar\").$type<Array<{name: string, amount: string}>>().default([]),\n  instructionsEn: text(\"instructions_en\").notNull(),\n  instructionsAr: text(\"instructions_ar\").notNull(),\n  toolsEn: jsonb(\"tools_en\").$type<string[]>().default([]),\n  toolsAr: jsonb(\"tools_ar\").$type<string[]>().default([]),\n  additionalRecipes: jsonb(\"additional_recipes\").$type<Array<{\n    nameEn: string;\n    nameAr: string;\n    country: string;\n    servingTemperature: string;\n    category: string;\n    instructionsEn: string;\n    instructionsAr: string;\n    ingredientsEn: Array<{name: string, amount: string}>;\n    ingredientsAr: Array<{name: string, amount: string}>;\n    toolsEn: string[];\n    toolsAr: string[];\n    servings: number;\n    videoUrl?: string;\n    notes?: string;\n  }>>().default([]),\n  rating: integer(\"rating\").default(0), // 0-5 stars\n  category: text(\"category\").notNull(), // 'breakfast', 'lunch', 'dinner', 'snack', 'dessert', 'drink'\n  servings: integer(\"servings\").default(4), // number of people this recipe serves\n  familyGroupId: varchar(\"family_group_id\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertRecipeSchema = createInsertSchema(recipes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\nexport type Recipe = typeof recipes.$inferSelect;\n\n// Shopping List Schema\nexport const shoppingList = pgTable(\"shopping_list\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemNameEn: text(\"item_name_en\").notNull(),\n  itemNameAr: text(\"item_name_ar\").notNull(),\n  quantity: text(\"quantity\").notNull(),\n  unit: text(\"unit\"), // 'kg', 'gram', 'cup', 'piece', etc\n  category: text(\"category\"), // 'vegetables', 'meat', 'dairy', etc\n  notes: text(\"notes\"),\n  isCompleted: boolean(\"is_completed\").default(false),\n  recipeId: varchar(\"recipe_id\"), // optional reference to recipe\n  familyGroupId: varchar(\"family_group_id\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertShoppingListSchema = createInsertSchema(shoppingList).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertShoppingListItem = z.infer<typeof insertShoppingListSchema>;\nexport type ShoppingListItem = typeof shoppingList.$inferSelect;\n\n// Pantry Schema\nexport const pantry = pgTable(\"pantry\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemNameEn: text(\"item_name_en\").notNull(),\n  itemNameAr: text(\"item_name_ar\").notNull(),\n  quantity: text(\"quantity\").notNull(),\n  unit: text(\"unit\"), // 'kg', 'gram', 'cup', 'piece', etc\n  category: text(\"category\"), // 'vegetables', 'meat', 'dairy', etc\n  expiryDate: timestamp(\"expiry_date\"),\n  location: text(\"location\"), // 'fridge', 'freezer', 'pantry', etc\n  notes: text(\"notes\"),\n  minimumStock: text(\"minimum_stock\"), // alert when quantity goes below this\n  familyGroupId: varchar(\"family_group_id\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPantrySchema = createInsertSchema(pantry).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertPantryItem = z.infer<typeof insertPantrySchema>;\nexport type PantryItem = typeof pantry.$inferSelect;\n\n// Tools List Schema\nexport const toolsList = pgTable(\"tools_list\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  toolNameEn: text(\"tool_name_en\").notNull(),\n  toolNameAr: text(\"tool_name_ar\").notNull(),\n  category: text(\"category\"), // 'cooking', 'baking', 'preparation', etc\n  notes: text(\"notes\"),\n  isAvailable: boolean(\"is_available\").default(false),\n  recipeId: varchar(\"recipe_id\"), // optional reference to recipe\n  familyGroupId: varchar(\"family_group_id\"),\n  createdBy: varchar(\"created_by\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertToolsListSchema = createInsertSchema(toolsList).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertToolsListItem = z.infer<typeof insertToolsListSchema>;\nexport type ToolsListItem = typeof toolsList.$inferSelect;\n\n// User and Family Group Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\nexport type FamilyGroup = typeof familyGroups.$inferSelect;\nexport type InsertFamilyGroup = typeof familyGroups.$inferInsert;\n\n// User and Family Group Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFamilyGroupSchema = createInsertSchema(familyGroups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n","size_bytes":6917},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { LanguageProvider } from \"./contexts/LanguageContext\";\nimport { useWebSocket } from \"./hooks/useWebSocket\";\nimport { InstallPrompt } from \"./components/InstallPrompt\";\nimport { Home } from \"./pages/Home\";\nimport { AddRecipe } from \"./pages/AddRecipe\";\nimport { ShoppingList } from \"./pages/ShoppingList\";\nimport { Pantry } from \"./pages/Pantry\";\nimport { Tools } from \"./pages/Tools\";\nimport NotFound from \"@/pages/not-found\";\n\n// WebSocket wrapper component\nfunction WebSocketProvider({ children }: { children: React.ReactNode }) {\n  useWebSocket(); // Initialize WebSocket connection\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/add\" component={AddRecipe} />\n      <Route path=\"/shopping\" component={ShoppingList} />\n      <Route path=\"/pantry\" component={Pantry} />\n      <Route path=\"/tools\" component={Tools} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"fixed inset-0 overflow-hidden\">\n      <QueryClientProvider client={queryClient}>\n        <LanguageProvider>\n          <WebSocketProvider>\n            <TooltipProvider>\n              <div className=\"h-full flex flex-col overflow-hidden\">\n                <Router />\n                <InstallPrompt />\n                <Toaster />\n              </div>\n            </TooltipProvider>\n          </WebSocketProvider>\n        </LanguageProvider>\n      </QueryClientProvider>\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":1787},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+Arabic:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(35, 30%, 98%);\n  --foreground: hsl(25, 15%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(25, 15%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(25, 15%, 15%);\n  --primary: hsl(15, 90%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 25%, 92%);\n  --secondary-foreground: hsl(25, 15%, 25%);\n  --muted: hsl(35, 15%, 95%);\n  --muted-foreground: hsl(25, 10%, 45%);\n  --accent: hsl(85, 25%, 55%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 70%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(35, 20%, 88%);\n  --input: hsl(35, 20%, 88%);\n  --ring: hsl(15, 90%, 60%);\n  --chart-1: hsl(15, 90%, 60%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(35, 15%, 95%);\n  --sidebar-foreground: hsl(25, 15%, 15%);\n  --sidebar-primary: hsl(15, 90%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(45, 25%, 92%);\n  --sidebar-accent-foreground: hsl(15, 90%, 60%);\n  --sidebar-border: hsl(35, 20%, 88%);\n  --sidebar-ring: hsl(15, 90%, 60%);\n  --font-sans: \"Inter\", \"Noto Sans Arabic\", system-ui, sans-serif;\n  --font-arabic: \"Noto Sans Arabic\", \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00), 0px 1px 2px -1px hsl(15, 90%, 60%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00), 0px 1px 2px -1px hsl(15, 90%, 60%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00), 0px 2px 4px -1px hsl(15, 90%, 60%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00), 0px 4px 6px -1px hsl(15, 90%, 60%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00), 0px 8px 10px -1px hsl(15, 90%, 60%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(15, 90%, 60%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(15, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 15%, 15%);\n  --secondary-foreground: hsl(45, 25%, 92%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(85, 25%, 45%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 70%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(207, 28%, 18%);\n  --ring: hsl(15, 90%, 60%);\n  --chart-1: hsl(15, 90%, 60%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(15, 90%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205, 70%, 8%);\n  --sidebar-accent-foreground: hsl(15, 88%, 53%);\n  --sidebar-border: hsl(205, 16%, 26%);\n  --sidebar-ring: hsl(15, 90%, 60%);\n  --font-sans: \"Inter\", \"Noto Sans Arabic\", system-ui, sans-serif;\n  --font-arabic: \"Noto Sans Arabic\", \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n[dir=\"rtl\"] {\n  font-family: var(--font-arabic);\n}\n\n.recipe-card {\n  transition: all 0.3s ease;\n}\n\n.recipe-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 10px 25px rgba(0,0,0,0.1);\n}\n\n.star-rating {\n  display: inline-flex;\n  gap: 2px;\n}\n\n.star {\n  color: #d1d5db;\n  cursor: pointer;\n  transition: color 0.2s;\n}\n\n.star.filled {\n  color: #fbbf24;\n}\n\n.language-toggle {\n  position: relative;\n  width: 60px;\n  height: 30px;\n  background: var(--muted);\n  border-radius: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.language-toggle-slider {\n  position: absolute;\n  top: 3px;\n  left: 3px;\n  width: 24px;\n  height: 24px;\n  background: var(--primary);\n  border-radius: 50%;\n  transition: transform 0.3s ease;\n}\n\n.language-toggle.arabic .language-toggle-slider {\n  transform: translateX(30px);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4665},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Header.tsx":{"content":"import { useState } from 'react';\nimport { Link } from 'wouter';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useUser } from '@/hooks/useUser';\nimport { LanguageToggle } from './LanguageToggle';\nimport { SyncStatus } from './SyncStatus';\nimport { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Button } from '@/components/ui/button';\nimport { Utensils, User, Menu, ShoppingCart, Package, X } from 'lucide-react';\n\nexport function Header() {\n  const { t } = useLanguage();\n  const { familyGroup } = useUser();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Show default name if no family group loaded yet\n  const appName = familyGroup ? `${familyGroup.name} Nesting` : \"Family Nesting\";\n\n  return (\n    <header className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-40 shadow-sm w-full\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-4 rtl:space-x-reverse\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Utensils className=\"text-primary-foreground text-lg\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-black dark:text-white\">\n                {appName}\n              </h1>\n            </div>\n          </div>\n\n          {/* Navigation - Show on large screens only */}\n          <nav className=\"hidden lg:flex items-center space-x-6 rtl:space-x-reverse\">\n            <Link href=\"/\" className=\"text-gray-700 dark:text-gray-300 hover:text-orange-600 transition-colors font-medium\" data-testid=\"nav-recipes\">\n              {t('recipes')}\n            </Link>\n            <Link href=\"/add\" className=\"text-gray-700 dark:text-gray-300 hover:text-orange-600 transition-colors font-medium\" data-testid=\"nav-add-recipe\">\n              {t('addRecipe')}\n            </Link>\n            <Link href=\"/shopping\" className=\"text-gray-700 dark:text-gray-300 hover:text-orange-600 transition-colors flex items-center gap-1 font-medium\" data-testid=\"nav-shopping-list\">\n              <ShoppingCart className=\"h-4 w-4\" />\n              {t('shoppingList')}\n            </Link>\n            <Link href=\"/pantry\" className=\"text-gray-700 dark:text-gray-300 hover:text-orange-600 transition-colors flex items-center gap-1 font-medium\" data-testid=\"nav-pantry\">\n              <Package className=\"h-4 w-4\" />\n              Pantry\n            </Link>\n            <Link href=\"/tools\" className=\"text-gray-700 dark:text-gray-300 hover:text-orange-600 transition-colors flex items-center gap-1 font-medium\" data-testid=\"nav-tools\">\n              <Utensils className=\"h-4 w-4\" />\n              Tools\n            </Link>\n          </nav>\n\n          {/* Sync, Language Toggle and User Menu */}\n          <div className=\"flex items-center space-x-4 rtl:space-x-reverse\">\n            <div className=\"hidden lg:flex items-center space-x-4\">\n              <SyncStatus />\n              <LanguageToggle />\n              {/* User Profile */}\n              <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center cursor-pointer\" data-testid=\"user-profile\">\n                <User className=\"text-accent-foreground text-sm\" />\n              </div>\n            </div>\n\n            {/* Mobile Menu Button - Always visible */}\n            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <button \n                  className=\"lg:hidden p-3 bg-orange-500 hover:bg-orange-600 text-white rounded-md shadow-md\" \n                  data-testid=\"mobile-menu\"\n                  style={{ minWidth: '48px', minHeight: '48px' }}\n                >\n                  <Menu className=\"w-6 h-6\" />\n                </button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px] sm:w-[400px]\">\n                <SheetHeader>\n                  <SheetTitle className=\"flex items-center gap-2\">\n                    <Utensils className=\"h-5 w-5\" />\n                    {appName}\n                  </SheetTitle>\n                </SheetHeader>\n                <nav className=\"mt-6 space-y-4\">\n                  <Link \n                    href=\"/\" \n                    className=\"flex items-center gap-3 p-3 text-foreground hover:bg-accent rounded-lg transition-colors\" \n                    onClick={() => setTimeout(() => setIsMobileMenuOpen(false), 100)}\n                    data-testid=\"mobile-nav-recipes\"\n                  >\n                    <Utensils className=\"h-5 w-5\" />\n                    {t('recipes')}\n                  </Link>\n                  <Link \n                    href=\"/add\" \n                    className=\"flex items-center gap-3 p-3 text-foreground hover:bg-accent rounded-lg transition-colors\" \n                    onClick={() => setTimeout(() => setIsMobileMenuOpen(false), 100)}\n                    data-testid=\"mobile-nav-add-recipe\"\n                  >\n                    <User className=\"h-5 w-5\" />\n                    {t('addRecipe')}\n                  </Link>\n                  <Link \n                    href=\"/shopping\" \n                    className=\"flex items-center gap-3 p-3 text-foreground hover:bg-accent rounded-lg transition-colors\" \n                    onClick={() => setTimeout(() => setIsMobileMenuOpen(false), 100)}\n                    data-testid=\"mobile-nav-shopping-list\"\n                  >\n                    <ShoppingCart className=\"h-5 w-5\" />\n                    {t('shoppingList')}\n                  </Link>\n                  <Link \n                    href=\"/pantry\" \n                    className=\"flex items-center gap-3 p-3 text-foreground hover:bg-accent rounded-lg transition-colors\" \n                    onClick={() => setTimeout(() => setIsMobileMenuOpen(false), 100)}\n                    data-testid=\"mobile-nav-pantry\"\n                  >\n                    <Package className=\"h-5 w-5\" />\n                    Pantry\n                  </Link>\n                  <Link \n                    href=\"/tools\" \n                    className=\"flex items-center gap-3 p-3 text-foreground hover:bg-accent rounded-lg transition-colors\" \n                    onClick={() => setTimeout(() => setIsMobileMenuOpen(false), 100)}\n                    data-testid=\"mobile-nav-tools\"\n                  >\n                    <Utensils className=\"h-5 w-5\" />\n                    Tools\n                  </Link>\n                </nav>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6767},"client/src/components/InstallPrompt.tsx":{"content":"import { usePWA } from '@/hooks/usePWA';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Download, X } from 'lucide-react';\nimport { useState } from 'react';\n\nexport function InstallPrompt() {\n  const { t } = useLanguage();\n  const { isInstallable, installApp } = usePWA();\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  if (!isInstallable || isDismissed) {\n    return null;\n  }\n\n  return (\n    <Card className=\"fixed bottom-4 left-4 right-4 z-50 border border-blue-200 bg-blue-50 dark:bg-blue-900/20 md:max-w-md md:left-auto\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-blue-900 dark:text-blue-100\">\n              {t('installApp')}\n            </h3>\n            <p className=\"text-sm text-blue-700 dark:text-blue-200 mt-1\">\n              {t('installAppDescription')}\n            </p>\n            <div className=\"flex gap-2 mt-3\">\n              <Button\n                onClick={installApp}\n                size=\"sm\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"install-app-button\"\n              >\n                <Download className=\"h-4 w-4 mr-1\" />\n                {t('install')}\n              </Button>\n              <Button\n                onClick={() => setIsDismissed(true)}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"dismiss-install-button\"\n              >\n                {t('later')}\n              </Button>\n            </div>\n          </div>\n          <Button\n            onClick={() => setIsDismissed(true)}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 w-6 p-0\"\n            data-testid=\"close-install-prompt\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2027},"client/src/components/LanguageToggle.tsx":{"content":"import { useLanguage } from '@/contexts/LanguageContext';\n\nexport function LanguageToggle() {\n  const { language, toggleLanguage } = useLanguage();\n\n  return (\n    <div className=\"flex items-center space-x-2 rtl:space-x-reverse\">\n      <span className=\"text-sm font-medium\">EN</span>\n      <div \n        className={`language-toggle ${language === 'ar' ? 'arabic' : ''}`}\n        onClick={toggleLanguage}\n        data-testid=\"language-toggle\"\n      >\n        <div className=\"language-toggle-slider\"></div>\n      </div>\n      <span className=\"text-sm font-medium\">العربية</span>\n    </div>\n  );\n}\n","size_bytes":602},"client/src/components/RecipeCard.tsx":{"content":"import { useState } from 'react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useUser } from '@/hooks/useUser';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { StarRating } from '@/components/StarRating';\nimport { ShareButton } from '@/components/ShareButton';\nimport { MultiRecipeSelector } from '@/components/MultiRecipeSelector';\nimport { ServingAdjustmentDialog } from '@/components/ServingAdjustmentDialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Globe, Flame, Leaf, ShoppingCart, Trash2 } from 'lucide-react';\nimport { Recipe } from '@shared/schema';\nimport { processIngredients } from '@/utils/ingredientUtils';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface RecipeCardProps {\n  recipe: Recipe;\n  onView: (recipe: Recipe) => void;\n  onEdit: (recipe: Recipe) => void;\n  onDelete: (id: string) => void;\n}\n\nexport function RecipeCard({ recipe, onView, onEdit, onDelete }: RecipeCardProps) {\n  const { t, language } = useLanguage();\n  const { user } = useUser();\n  const [isMultiSelectorOpen, setIsMultiSelectorOpen] = useState(false);\n  const [isServingDialogOpen, setIsServingDialogOpen] = useState(false);\n  const [pendingSelectedRecipes, setPendingSelectedRecipes] = useState<number[]>([]);\n\n  console.log('RecipeCard rendering for:', recipe?.nameEn || recipe?.nameAr, recipe);\n\n  const addToShoppingListMutation = useMutation({\n    mutationFn: async ({ selectedRecipes, people, days }: { selectedRecipes: number[], people: number, days: number }) => {\n      const response = await apiRequest('POST', '/api/shopping/recipe', { \n        recipeId: recipe.id, \n        selectedRecipes,\n        people,\n        days\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tools', user?.familyGroupId] });\n    },\n  });\n\n  const handleAddToShoppingList = () => {\n    // Check if recipe has additional recipes\n    const hasMultipleRecipes = recipe.additionalRecipes && recipe.additionalRecipes.length > 0;\n    \n    if (hasMultipleRecipes) {\n      setIsMultiSelectorOpen(true);\n    } else {\n      // Open serving adjustment dialog for main recipe\n      setPendingSelectedRecipes([0]);\n      setIsServingDialogOpen(true);\n    }\n  };\n\n  const handleMultipleRecipesAdd = (selectedRecipes: number[]) => {\n    // Open serving adjustment dialog with selected recipes\n    setPendingSelectedRecipes(selectedRecipes);\n    setIsServingDialogOpen(true);\n  };\n\n  const handleServingConfirm = (people: number, days: number) => {\n    addToShoppingListMutation.mutate({ selectedRecipes: pendingSelectedRecipes, people, days });\n  };\n\n\n  const recipeName = language === 'ar' ? recipe.nameAr : recipe.nameEn;\n  const recipeDescription = language === 'ar' ? recipe.descriptionAr : recipe.descriptionEn;\n\n  // Use a placeholder image if no images are provided\n  const imageUrl = recipe.images && recipe.images.length > 0 \n    ? recipe.images[0] \n    : \"https://images.unsplash.com/photo-1567620905732-2d1ec7ab7445?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\";\n\n  if (!recipe) {\n    console.log('RecipeCard: No recipe data provided');\n    return null;\n  }\n\n  return (\n    <div \n      className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-200\"\n      data-testid={`recipe-card-${recipe.id}`}\n      style={{ minHeight: '400px', display: 'block', width: '100%' }}\n    >\n      <div className=\"w-full h-48 bg-gray-100 dark:bg-gray-700 overflow-hidden\">\n        <img \n          src={imageUrl}\n          alt={recipeName || 'Recipe'}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            e.currentTarget.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%23f3f4f6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='14' fill='%23666' text-anchor='middle' dy='.3em'%3ERecipe%3C/text%3E%3C/svg%3E\";\n          }}\n        />\n      </div>\n      \n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-start mb-2\">\n          <h3 \n            className=\"font-semibold text-lg text-gray-900 dark:text-white truncate flex-1 mr-2\" \n            data-testid={`recipe-title-${recipe.id}`}\n          >\n            {recipeName || 'Untitled Recipe'}\n          </h3>\n          <StarRating recipe={recipe} size=\"sm\" interactive={true} />\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-300 mb-3\">\n          <span className=\"flex items-center\">\n            <Globe className=\"w-4 h-4 mr-1\" />\n            {recipe.country || 'Unknown'}\n          </span>\n          <span className=\"flex items-center\">\n            {recipe.servingTemperature === 'hot' ? '🔥' : '🥬'}\n            <span className=\"ml-1\">{recipe.servingTemperature || 'N/A'}</span>\n          </span>\n        </div>\n\n        {recipeDescription && (\n          <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-2\">\n            {recipeDescription}\n          </p>\n        )}\n\n        <div className=\"flex items-center gap-2 mb-4\">\n          <span className=\"px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs rounded\">\n            {recipe.category || 'General'}\n          </span>\n          {recipe.prepTime && (\n            <span className=\"px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-xs rounded\">\n              {recipe.prepTime} min\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <button\n            className=\"flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200\"\n            onClick={() => {\n              console.log('Recipe card view button clicked for:', recipe.nameEn || recipe.nameAr);\n              onView(recipe);\n            }}\n            data-testid={`view-recipe-${recipe.id}`}\n          >\n            View Recipe\n          </button>\n          <button\n            className={`p-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-300 ${addToShoppingListMutation.isPending ? 'bg-green-100 scale-110' : ''}`}\n            onClick={handleAddToShoppingList}\n            disabled={addToShoppingListMutation.isPending}\n            data-testid={`add-to-shopping-${recipe.id}`}\n            title=\"Add to Shopping List\"\n          >\n            <ShoppingCart className=\"w-4 h-4 text-gray-600 dark:text-gray-300\" />\n          </button>\n          <button\n            className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-red-50 dark:hover:bg-red-900 transition-colors duration-200\"\n            onClick={() => {\n              if (confirm(`Delete recipe: ${recipeName || 'this recipe'}?`)) {\n                onDelete(recipe.id);\n              }\n            }}\n            data-testid={`delete-recipe-${recipe.id}`}\n            title=\"Delete Recipe\"\n          >\n            <Trash2 className=\"w-4 h-4 text-red-500\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Multi Recipe Selector Modal */}\n      {isMultiSelectorOpen && (\n        <MultiRecipeSelector\n          recipe={recipe}\n          isOpen={isMultiSelectorOpen}\n          onClose={() => setIsMultiSelectorOpen(false)}\n          onAddToShoppingList={handleMultipleRecipesAdd}\n        />\n      )}\n\n      {/* Serving Adjustment Dialog */}\n      {isServingDialogOpen && (\n        <ServingAdjustmentDialog\n          recipe={recipe}\n          selectedRecipes={pendingSelectedRecipes}\n          isOpen={isServingDialogOpen}\n          onClose={() => setIsServingDialogOpen(false)}\n          onConfirm={handleServingConfirm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":8356},"client/src/components/RecipeDetailModal.tsx":{"content":"import { useLanguage } from '@/contexts/LanguageContext';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { StarRating } from '@/components/StarRating';\nimport { ShareButton } from '@/components/ShareButton';\nimport { MultiRecipeSelector } from '@/components/MultiRecipeSelector';\nimport { Clock, Globe, Flame, Leaf, Edit, Plus, ShoppingCart, List } from 'lucide-react';\nimport { Recipe } from '@shared/schema';\nimport { useState } from 'react';\nimport { ServingAdjustmentDialog } from '@/components/ServingAdjustmentDialog';\n\ninterface RecipeDetailModalProps {\n  recipe: Recipe | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onEdit: (recipe: Recipe) => void;\n}\n\nexport function RecipeDetailModal({ recipe, isOpen, onClose, onEdit }: RecipeDetailModalProps) {\n  const { t, language } = useLanguage();\n  const [isMultiSelectorOpen, setIsMultiSelectorOpen] = useState(false);\n  const [isServingAdjustmentOpen, setIsServingAdjustmentOpen] = useState(false);\n  const [adjustedServings, setAdjustedServings] = useState<{people: number, days: number} | null>(null);\n\n  console.log('🔍 RecipeDetailModal render:', {\n    isOpen,\n    hasRecipe: !!recipe,\n    recipeFull: recipe\n  });\n\n  if (!isOpen) {\n    return null;\n  }\n\n  if (!recipe) {\n    console.log('❌ RecipeDetailModal: No recipe provided');\n    return (\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n        onClick={onClose}\n      >\n        <div \n          className=\"bg-white dark:bg-gray-800 p-6 rounded-lg max-w-md w-full mx-4\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <h2 className=\"text-xl font-bold mb-4 text-gray-900 dark:text-white\">Error</h2>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-4\">No recipe data available</p>\n          <button \n            onClick={onClose} \n            className=\"w-full px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-200\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const recipeName = language === 'ar' ? recipe.nameAr || recipe.nameEn : recipe.nameEn || recipe.nameAr;\n  const recipeDescription = language === 'ar' ? recipe.descriptionAr || recipe.descriptionEn : recipe.descriptionEn || recipe.descriptionAr;\n  const ingredients = language === 'ar' ? recipe.ingredientsAr || recipe.ingredientsEn : recipe.ingredientsEn || recipe.ingredientsAr;\n  const instructions = language === 'ar' ? recipe.instructionsAr || recipe.instructionsEn : recipe.instructionsEn || recipe.instructionsAr;\n  const tools = language === 'ar' ? recipe.toolsAr || recipe.toolsEn : recipe.toolsEn || recipe.toolsAr;\n\n  // Calculate adjusted ingredients based on serving adjustment\n  const getAdjustedIngredients = () => {\n    if (!adjustedServings || !ingredients) return ingredients || [];\n    \n    const originalServings = recipe.servings || 4;\n    const totalServingsNeeded = adjustedServings.people * adjustedServings.days;\n    const multiplier = totalServingsNeeded / originalServings;\n    \n    return ingredients.map(ingredient => ({\n      ...ingredient,\n      amount: adjustIngredientAmount(ingredient.amount, multiplier)\n    }));\n  };\n\n  const adjustIngredientAmount = (amount: string, multiplier: number): string => {\n    // Try to extract number from amount string\n    const numberMatch = amount.match(/([0-9.]+)/);\n    if (numberMatch) {\n      const originalAmount = parseFloat(numberMatch[1]);\n      const adjustedAmount = originalAmount * multiplier;\n      return amount.replace(numberMatch[1], adjustedAmount.toString());\n    }\n    return amount; // Return unchanged if no number found\n  };\n\n  const displayIngredients = getAdjustedIngredients();\n\n  const imageUrl = recipe.images && recipe.images.length > 0 \n    ? recipe.images[0] \n    : \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='300' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23f3f4f6'/%3E%3Ctext x='200' y='150' font-family='Arial' font-size='24' fill='%23666' text-anchor='middle' dy='.3em'%3ERecipe Image%3C/text%3E%3C/svg%3E\";\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      onClick={onClose}\n    >\n      <div \n        className=\"bg-white dark:bg-gray-900 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {recipeName || 'Recipe Details'}\n            </h2>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => onEdit(recipe)}\n                className=\"p-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors duration-200\"\n                title=\"Edit Recipe\"\n              >\n                <Edit className=\"w-5 h-5\" />\n              </button>\n              <button\n                onClick={onClose}\n                className=\"p-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors duration-200\"\n                title=\"Close\"\n              >\n                ✕\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Image */}\n          <div className=\"w-full h-64 mb-6 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n            <img \n              src={imageUrl}\n              alt={recipeName || 'Recipe'}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n\n          {/* Recipe Info */}\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Recipe Information</h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Globe className=\"w-4 h-4 text-gray-500\" />\n                  <span className=\"text-gray-700 dark:text-gray-300\">Country: {recipe.country || 'Not specified'}</span>\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  {recipe.servingTemperature === 'hot' ? (\n                    <Flame className=\"w-4 h-4 text-orange-500\" />\n                  ) : (\n                    <Leaf className=\"w-4 h-4 text-green-500\" />\n                  )}\n                  <span className=\"text-gray-700 dark:text-gray-300\">\n                    Temperature: {recipe.servingTemperature || 'Not specified'}\n                  </span>\n                </div>\n\n                {recipe.prepTime && (\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"w-4 h-4 text-blue-500\" />\n                    <span className=\"text-gray-700 dark:text-gray-300\">Prep Time: {recipe.prepTime} minutes</span>\n                  </div>\n                )}\n\n                {recipe.calories && (\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-gray-700 dark:text-gray-300\">Calories: {recipe.calories}</span>\n                  </div>\n                )}\n\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">Rating:</span>\n                  <div className=\"text-yellow-500\">\n                    {'★'.repeat(recipe.rating || 0)}{'☆'.repeat(5 - (recipe.rating || 0))}\n                  </div>\n                </div>\n\n                {recipe.category && (\n                  <div>\n                    <span className=\"px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full\">\n                      {recipe.category}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Description</h3>\n              <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed\">\n                {recipeDescription || 'No description available.'}\n              </p>\n            </div>\n          </div>\n\n          {/* Ingredients */}\n          {displayIngredients && displayIngredients.length > 0 && (\n            <div className=\"mt-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white flex items-center gap-2\">\n                  <List className=\"w-5 h-5\" />\n                  Ingredients\n                </h3>\n                <div className=\"flex items-center gap-2\">\n                  {adjustedServings && (\n                    <span className=\"text-sm bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded\">\n                      For {adjustedServings.people} people × {adjustedServings.days} days\n                    </span>\n                  )}\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setIsServingAdjustmentOpen(true)}\n                  >\n                    Adjust Servings\n                  </Button>\n                  {adjustedServings && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => setAdjustedServings(null)}\n                    >\n                      Reset\n                    </Button>\n                  )}\n                </div>\n              </div>\n              <div className=\"grid sm:grid-cols-2 gap-2\">\n                {displayIngredients.map((ingredient, index) => (\n                  <div \n                    key={index}\n                    className=\"flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                  >\n                    <span className=\"text-gray-900 dark:text-white font-medium\">\n                      {ingredient.name}\n                    </span>\n                    <span className=\"text-gray-600 dark:text-gray-400\">\n                      {ingredient.amount}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Tools */}\n          {tools && tools.length > 0 && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Tools Needed</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {tools.map((tool, index) => (\n                  <span \n                    key={index}\n                    className=\"px-3 py-1 bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 text-sm rounded-full\"\n                  >\n                    {tool}\n                  </span>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Instructions */}\n          {instructions && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Instructions</h3>\n              <div className=\"p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-line\">\n                  {instructions}\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* Video Link */}\n          {recipe.videoUrl && (\n            <div className=\"mt-8\">\n              <h3 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">Video</h3>\n              <a \n                href={recipe.videoUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md transition-colors duration-200\"\n              >\n                Watch Video\n              </a>\n            </div>\n          )}\n\n          {/* Additional Recipes - removed additionalLinks section since it doesn't exist in schema */}\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 flex flex-wrap gap-4\">\n            <button\n              onClick={() => setIsMultiSelectorOpen(true)}\n              className=\"flex items-center gap-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-md transition-colors duration-200\"\n            >\n              <ShoppingCart className=\"w-4 h-4\" />\n              Add to Shopping List\n            </button>\n            <button\n              onClick={() => onEdit(recipe)}\n              className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-200\"\n            >\n              <Edit className=\"w-4 h-4\" />\n              Edit Recipe\n            </button>\n            <ShareButton recipe={recipe} />\n          </div>\n        </div>\n      </div>\n\n      {/* Multi Recipe Selector Modal */}\n      {isMultiSelectorOpen && (\n        <MultiRecipeSelector\n          recipe={recipe}\n          isOpen={isMultiSelectorOpen}\n          onClose={() => setIsMultiSelectorOpen(false)}\n          onAddToShoppingList={() => {}}\n        />\n      )}\n\n      {/* Serving Adjustment Dialog */}\n      {isServingAdjustmentOpen && (\n        <ServingAdjustmentDialog\n          recipe={recipe}\n          isOpen={isServingAdjustmentOpen}\n          onClose={() => setIsServingAdjustmentOpen(false)}\n          selectedRecipes={[0]}\n          onConfirm={(people, days) => {\n            setAdjustedServings({ people, days });\n            setIsServingAdjustmentOpen(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":14100},"client/src/components/SearchFilters.tsx":{"content":"import { useState } from 'react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Search } from 'lucide-react';\n\ninterface SearchFiltersProps {\n  onSearch: (query: string) => void;\n  onFilter: (filters: {\n    country?: string;\n    servingTemperature?: string;\n    category?: string;\n    rating?: number;\n  }) => void;\n  currentFilters?: {\n    country?: string;\n    servingTemperature?: string;\n    category?: string;\n    rating?: number;\n  };\n}\n\nexport function SearchFilters({ onSearch, onFilter, currentFilters = {} }: SearchFiltersProps) {\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState({\n    country: '',\n    servingTemperature: '',\n    category: '',\n  });\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n    onSearch(query);\n  };\n\n  const handleFilterChange = (key: string, value: string) => {\n    const actualValue = value === 'all_countries' || value === 'all_temperatures' ? '' : value;\n    const newFilters = { ...filters, [key]: actualValue };\n    setFilters(newFilters);\n    onFilter({\n      country: newFilters.country || undefined,\n      servingTemperature: newFilters.servingTemperature || undefined,\n      category: newFilters.category || undefined,\n    });\n  };\n\n  const countries = [\n    'egypt', 'lebanon', 'syria', 'morocco', 'italy', 'france', 'india', 'mexico', 'greece', 'turkey'\n  ];\n\n  const categories = [\n    'breakfast', 'lunch', 'dinner', 'snack', 'dessert', 'drink'\n  ];\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6 mb-6 shadow-sm\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {/* Search Input */}\n        <div className=\"md:col-span-2\">\n          <label className=\"block text-sm font-medium text-foreground mb-2\">\n            {t('searchRecipes')}\n          </label>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 rtl:left-auto rtl:right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className=\"pl-10 rtl:pl-4 rtl:pr-10\"\n              placeholder={t('searchPlaceholder')}\n              data-testid=\"search-input\"\n            />\n          </div>\n        </div>\n\n        {/* Country Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground mb-2\">\n            {t('country')}\n          </label>\n          <Select value={filters.country || 'all_countries'} onValueChange={(value) => handleFilterChange('country', value)}>\n            <SelectTrigger data-testid=\"country-filter\">\n              <SelectValue placeholder={t('allCountries')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all_countries\">{t('allCountries')}</SelectItem>\n              {countries.map((country) => (\n                <SelectItem key={country} value={country}>\n                  {t(country)}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Temperature Filter */}\n        <div>\n          <label className=\"block text-sm font-medium text-foreground mb-2\">\n            {t('serving')}\n          </label>\n          <Select value={filters.servingTemperature || 'all_temperatures'} onValueChange={(value) => handleFilterChange('servingTemperature', value)}>\n            <SelectTrigger data-testid=\"temperature-filter\">\n              <SelectValue placeholder={t('all')} />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all_temperatures\">{t('all')}</SelectItem>\n              <SelectItem value=\"hot\">{t('hot')}</SelectItem>\n              <SelectItem value=\"cold\">{t('cold')}</SelectItem>\n              <SelectItem value=\"room_temp\">{t('roomTemp')}</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Quick Filters */}\n      <div className=\"flex flex-wrap gap-2 mt-4\">\n        <Button\n          variant={!currentFilters.country && !currentFilters.servingTemperature && !currentFilters.category && !currentFilters.rating ? \"default\" : \"secondary\"}\n          size=\"sm\"\n          className=\"rounded-full\"\n          onClick={() => {\n            setFilters({ country: '', servingTemperature: '', category: '' });\n            setSearchQuery('');\n            onSearch('');\n            onFilter({});\n          }}\n          data-testid=\"filter-all\"\n        >\n          {t('all')}\n        </Button>\n        <Button\n          variant={currentFilters.rating === 5 ? \"default\" : \"secondary\"}\n          size=\"sm\"\n          className=\"rounded-full\"\n          onClick={() => onFilter({ rating: 5 })}\n          data-testid=\"filter-5-stars\"\n        >\n          {t('5Stars') || '5 Stars'}\n        </Button>\n        {categories.map((category) => (\n          <Button\n            key={category}\n            variant={currentFilters.category === category ? \"default\" : \"secondary\"}\n            size=\"sm\"\n            className=\"rounded-full\"\n            onClick={() => handleFilterChange('category', category)}\n            data-testid={`filter-${category}`}\n          >\n            {t(category)}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5572},"client/src/components/SyncStatus.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { RefreshCw, Check, AlertCircle, Wifi, WifiOff } from 'lucide-react';\n\nexport function SyncStatus() {\n  const { t } = useLanguage();\n  const { isConnected, lastSynced, reconnect } = useWebSocket();\n  const [autoSync, setAutoSync] = useState(true);\n\n  // Load sync preferences from localStorage\n  useEffect(() => {\n    const savedAutoSync = localStorage.getItem('autoSync');\n    if (savedAutoSync !== null) {\n      setAutoSync(JSON.parse(savedAutoSync));\n    }\n  }, []);\n\n  const performManualSync = () => {\n    if (!isConnected) {\n      reconnect();\n    } else {\n    }\n  };\n\n  const toggleAutoSync = () => {\n    const newAutoSync = !autoSync;\n    setAutoSync(newAutoSync);\n    localStorage.setItem('autoSync', JSON.stringify(newAutoSync));\n    \n  };\n\n  const formatLastSynced = (date: Date) => {\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return t('justNow');\n    if (diffInMinutes < 60) return `${diffInMinutes}${t('minutesAgo')}`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}${t('hoursAgo')}`;\n    \n    return date.toLocaleDateString();\n  };\n\n  const getSyncIcon = () => {\n    if (isConnected) {\n      return <Wifi className=\"h-4 w-4 text-green-500\" />;\n    } else {\n      return <WifiOff className=\"h-4 w-4 text-red-500\" />;\n    }\n  };\n\n  const getSyncBadgeVariant = () => {\n    return isConnected ? 'default' : 'destructive';\n  };\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={performManualSync}\n            data-testid=\"sync-button\"\n          >\n            {getSyncIcon()}\n            <span className=\"ml-1 hidden lg:inline\">\n              {isConnected ? t('connected') : t('disconnected')}\n            </span>\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <div className=\"text-sm\">\n            <div>{t('lastSynced')}: {lastSynced ? formatLastSynced(lastSynced) : t('never')}</div>\n            <div className=\"mt-1\">\n              <button\n                onClick={toggleAutoSync}\n                className=\"text-xs underline\"\n                data-testid=\"toggle-auto-sync\"\n              >\n                {autoSync ? t('disableAutoSync') : t('enableAutoSync')}\n              </button>\n            </div>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n\n      <Badge variant={getSyncBadgeVariant()} className=\"hidden sm:inline-flex\">\n        {isConnected ? t('realTimeSync') : t('offline')}\n      </Badge>\n    </div>\n  );\n}","size_bytes":3034},"client/src/contexts/LanguageContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { getTranslation } from '@/lib/i18n';\n\ntype Language = 'en' | 'ar';\n\ninterface LanguageContextType {\n  language: Language;\n  toggleLanguage: () => void;\n  t: (key: string) => string;\n  isRtl: boolean;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>('en');\n\n  useEffect(() => {\n    // Load saved language preference\n    const saved = localStorage.getItem('preferredLanguage') as Language;\n    if (saved && (saved === 'en' || saved === 'ar')) {\n      setLanguage(saved);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update HTML attributes for RTL/LTR support\n    const html = document.documentElement;\n    html.setAttribute('lang', language);\n    html.setAttribute('dir', language === 'ar' ? 'rtl' : 'ltr');\n    \n    // Save language preference\n    localStorage.setItem('preferredLanguage', language);\n  }, [language]);\n\n  const toggleLanguage = () => {\n    setLanguage(prev => prev === 'en' ? 'ar' : 'en');\n  };\n\n  const t = (key: string) => getTranslation(key, language);\n  const isRtl = language === 'ar';\n\n  return (\n    <LanguageContext.Provider value={{ language, toggleLanguage, t, isRtl }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n}\n","size_bytes":1620},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 2000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3892},"client/src/hooks/usePWA.ts":{"content":"import { useEffect, useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useLanguage } from '@/contexts/LanguageContext';\n\ninterface BeforeInstallPromptEvent extends Event {\n  readonly platforms: string[];\n  readonly userChoice: Promise<{\n    outcome: 'accepted' | 'dismissed';\n    platform: string;\n  }>;\n  prompt(): Promise<void>;\n}\n\nexport function usePWA() {\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    // Register service worker\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        navigator.serviceWorker.register('/sw.js')\n          .then((registration) => {\n            console.log('SW registered: ', registration);\n          })\n          .catch((registrationError) => {\n            console.log('SW registration failed: ', registrationError);\n          });\n      });\n    }\n\n    // Check if app is already installed\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isInWebAppiOS = (window.navigator as any).standalone === true;\n    \n    if (isStandalone || isInWebAppiOS) {\n      setIsInstalled(true);\n    }\n\n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault();\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      setIsInstallable(true);\n    };\n\n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setIsInstallable(false);\n      setDeferredPrompt(null);\n      \n      toast({\n        title: t('appInstalled'),\n        description: t('appInstalledSuccessfully'),\n      });\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, [t, toast]);\n\n  const installApp = async () => {\n    if (!deferredPrompt) return;\n\n    deferredPrompt.prompt();\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      console.log('User accepted the install prompt');\n    } else {\n      console.log('User dismissed the install prompt');\n    }\n    \n    setDeferredPrompt(null);\n    setIsInstallable(false);\n  };\n\n  return {\n    isInstallable,\n    isInstalled,\n    installApp,\n  };\n}","size_bytes":2700},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { queryClient } from '@/lib/queryClient';\n\ninterface WebSocketMessage {\n  type: string;\n  action: string;\n  data: any;\n  timestamp: number;\n}\n\nexport function useWebSocket() {\n  const { t } = useLanguage();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastSynced, setLastSynced] = useState<Date | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        setLastSynced(new Date());\n        \n        // Clear any reconnection timeout\n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n          reconnectTimeoutRef.current = null;\n        }\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleMessage(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log('Attempting to reconnect...');\n          connect();\n        }, 3000);\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to connect to WebSocket:', error);\n      setIsConnected(false);\n    }\n  };\n\n  const handleMessage = (message: WebSocketMessage) => {\n    console.log('Received WebSocket message:', message);\n    setLastSynced(new Date());\n\n    // Handle different types of updates\n    switch (message.type) {\n      case 'system':\n        // System messages don't need user notification\n        break;\n\n      case 'recipes':\n        handleRecipeUpdate(message);\n        break;\n\n      case 'shopping':\n        handleShoppingUpdate(message);\n        break;\n\n      case 'pantry':\n        handlePantryUpdate(message);\n        break;\n\n      case 'tools':\n        handleToolsUpdate(message);\n        break;\n\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  };\n\n  const handleRecipeUpdate = (message: WebSocketMessage) => {\n    // Invalidate recipes cache to refetch data\n    queryClient.invalidateQueries({ queryKey: ['/api/recipes'] });\n  };\n\n  const handleShoppingUpdate = (message: WebSocketMessage) => {\n    // Invalidate all shopping list queries (with and without family group ID)\n    queryClient.invalidateQueries({ queryKey: ['/api/shopping'] });\n  };\n\n  const handlePantryUpdate = (message: WebSocketMessage) => {\n    // Invalidate all pantry queries (with and without family group ID)\n    queryClient.invalidateQueries({ queryKey: ['/api/pantry'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/pantry/low-stock'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/pantry/expiring-soon'] });\n  };\n\n  const handleToolsUpdate = (message: WebSocketMessage) => {\n    // Invalidate tools cache\n    queryClient.invalidateQueries({ queryKey: ['/api/tools'] });\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    isConnected,\n    lastSynced,\n    reconnect: connect,\n  };\n}","size_bytes":3954},"client/src/lib/i18n.ts":{"content":"export interface Translations {\n  [key: string]: {\n    en: string;\n    ar: string;\n  };\n}\n\nexport const translations: Translations = {\n  // App Name\n  appName: {\n    en: \"Family Nesting\",\n    ar: \"Family Nesting\"\n  },\n  \n  // Navigation\n  recipes: {\n    en: \"Recipes\",\n    ar: \"الوصفات\"\n  },\n  addRecipe: {\n    en: \"Add Recipe\",\n    ar: \"إضافة وصفة\"\n  },\n  categories: {\n    en: \"Categories\",\n    ar: \"التصنيفات\"\n  },\n  myFavorites: {\n    en: \"My Favorites\",\n    ar: \"المفضلة\"\n  },\n  \n  // Search and Filters\n  searchRecipes: {\n    en: \"Search Recipes\",\n    ar: \"البحث في الوصفات\"\n  },\n  searchPlaceholder: {\n    en: \"Search by name, ingredients, or country...\",\n    ar: \"البحث بالاسم أو المقادير أو البلد...\"\n  },\n  country: {\n    en: \"Country\",\n    ar: \"البلد\"\n  },\n  allCountries: {\n    en: \"All Countries\",\n    ar: \"جميع البلدان\"\n  },\n  serving: {\n    en: \"Serving\",\n    ar: \"التقديم\"\n  },\n  all: {\n    en: \"All\",\n    ar: \"الكل\"\n  },\n  hot: {\n    en: \"Hot\",\n    ar: \"ساخن\"\n  },\n  cold: {\n    en: \"Cold\",\n    ar: \"بارد\"\n  },\n  roomTemp: {\n    en: \"Room Temperature\",\n    ar: \"درجة حرارة الغرفة\"\n  },\n  \n  // Recipe Details\n  viewRecipe: {\n    en: \"View Recipe\",\n    ar: \"عرض الوصفة\"\n  },\n  editRecipe: {\n    en: \"Edit Recipe\",\n    ar: \"تعديل الوصفة\"\n  },\n  deleteRecipe: {\n    en: \"Delete Recipe\",\n    ar: \"حذف الوصفة\"\n  },\n  addToFavorites: {\n    en: \"Add to Favorites\",\n    ar: \"إضافة للمفضلة\"\n  },\n  shareRecipe: {\n    en: \"Share Recipe\",\n    ar: \"مشاركة الوصفة\"\n  },\n  \n  // Recipe Form\n  addNewRecipe: {\n    en: \"Add New Recipe\",\n    ar: \"إضافة وصفة جديدة\"\n  },\n  recipeNameEn: {\n    en: \"Recipe Name (English)\",\n    ar: \"اسم الوصفة (الإنجليزية)\"\n  },\n  recipeNameAr: {\n    en: \"Recipe Name (Arabic)\",\n    ar: \"اسم الوصفة (العربية)\"\n  },\n  countryOfOrigin: {\n    en: \"Country of Origin\",\n    ar: \"بلد المنشأ\"\n  },\n  servingTemperature: {\n    en: \"Serving Temperature\",\n    ar: \"درجة حرارة التقديم\"\n  },\n  calories: {\n    en: \"Calories (per serving)\",\n    ar: \"السعرات الحرارية (لكل حصة)\"\n  },\n  prepTime: {\n    en: \"Preparation Time (minutes)\",\n    ar: \"وقت التحضير (بالدقائق)\"\n  },\n  recipeImages: {\n    en: \"Recipe Images\",\n    ar: \"صور الوصفة\"\n  },\n  videoTutorial: {\n    en: \"Video Tutorial URL\",\n    ar: \"رابط فيديو الشرح\"\n  },\n  ingredients: {\n    en: \"Ingredients\",\n    ar: \"المقادير\"\n  },\n  instructions: {\n    en: \"Instructions\",\n    ar: \"طريقة التحضير\"\n  },\n  instructionsEn: {\n    en: \"Preparation Instructions (English)\",\n    ar: \"طريقة التحضير (الإنجليزية)\"\n  },\n  instructionsAr: {\n    en: \"Preparation Instructions (Arabic)\",\n    ar: \"طريقة التحضير (العربية)\"\n  },\n  requiredTools: {\n    en: \"Required Tools & Equipment\",\n    ar: \"الأدوات والمعدات المطلوبة\"\n  },\n  additionalLinks: {\n    en: \"Additional Links\",\n    ar: \"روابط إضافية\"\n  },\n  \n  // Categories\n  breakfast: {\n    en: \"Breakfast\",\n    ar: \"فطار\"\n  },\n  lunch: {\n    en: \"Lunch\",\n    ar: \"غداء\"\n  },\n  dinner: {\n    en: \"Dinner\",\n    ar: \"عشاء\"\n  },\n  snack: {\n    en: \"Snack\",\n    ar: \"وجبة خفيفة\"\n  },\n  dessert: {\n    en: \"Dessert\",\n    ar: \"حلويات\"\n  },\n  drink: {\n    en: \"Drink\",\n    ar: \"مشروبات\"\n  },\n  \n  // Countries\n  egypt: {\n    en: \"Egypt\",\n    ar: \"مصر\"\n  },\n  lebanon: {\n    en: \"Lebanon\",\n    ar: \"لبنان\"\n  },\n  syria: {\n    en: \"Syria\",\n    ar: \"سوريا\"\n  },\n  morocco: {\n    en: \"Morocco\",\n    ar: \"المغرب\"\n  },\n  italy: {\n    en: \"Italy\",\n    ar: \"إيطاليا\"\n  },\n  france: {\n    en: \"France\",\n    ar: \"فرنسا\"\n  },\n  india: {\n    en: \"India\",\n    ar: \"الهند\"\n  },\n  mexico: {\n    en: \"Mexico\",\n    ar: \"المكسيك\"\n  },\n  greece: {\n    en: \"Greece\",\n    ar: \"اليونان\"\n  },\n  turkey: {\n    en: \"Turkey\",\n    ar: \"تركيا\"\n  },\n  \n  // Common Actions\n  save: {\n    en: \"Save\",\n    ar: \"حفظ\"\n  },\n  cancel: {\n    en: \"Cancel\",\n    ar: \"إلغاء\"\n  },\n  delete: {\n    en: \"Delete\",\n    ar: \"حذف\"\n  },\n  edit: {\n    en: \"Edit\",\n    ar: \"تعديل\"\n  },\n  add: {\n    en: \"Add\",\n    ar: \"إضافة\"\n  },\n  remove: {\n    en: \"Remove\",\n    ar: \"إزالة\"\n  },\n  \n  // Messages\n  recipeDeleted: {\n    en: \"Recipe deleted successfully\",\n    ar: \"تم حذف الوصفة بنجاح\"\n  },\n  recipeSaved: {\n    en: \"Recipe saved successfully\",\n    ar: \"تم حفظ الوصفة بنجاح\"\n  },\n  errorOccurred: {\n    en: \"An error occurred\",\n    ar: \"حدث خطأ\"\n  },\n  noRecipesFound: {\n    en: \"No recipes found\",\n    ar: \"لم يتم العثور على وصفات\"\n  },\n  \n  // Placeholders\n  enterRecipeNameEn: {\n    en: \"Enter recipe name in English\",\n    ar: \"أدخل اسم الوصفة بالإنجليزية\"\n  },\n  enterRecipeNameAr: {\n    en: \"Enter recipe name in Arabic\",\n    ar: \"أدخل اسم الوصفة بالعربية\"\n  },\n  selectCountry: {\n    en: \"Select Country\",\n    ar: \"اختر البلد\"\n  },\n  selectTemperature: {\n    en: \"Select Temperature\",\n    ar: \"اختر درجة الحرارة\"\n  },\n  selectCategory: {\n    en: \"Select Category\",\n    ar: \"اختر التصنيف\"\n  },\n  dragDropImages: {\n    en: \"Drag and drop images here, or click to browse\",\n    ar: \"اسحب وأفلت الصور هنا، أو انقر للتصفح\"\n  },\n  chooseFiles: {\n    en: \"Choose Files\",\n    ar: \"اختر الملفات\"\n  },\n  stepByStepEn: {\n    en: \"Step-by-step instructions in English...\",\n    ar: \"تعليمات التحضير خطوة بخطوة بالإنجليزية...\"\n  },\n  stepByStepAr: {\n    en: \"Step-by-step instructions in Arabic...\",\n    ar: \"تعليمات التحضير خطوة بخطوة بالعربية...\"\n  },\n  \n  // Quick Info\n  quickInfo: {\n    en: \"Quick Info\",\n    ar: \"معلومات سريعة\"\n  },\n  toolsRequired: {\n    en: \"Tools Required\",\n    ar: \"الأدوات المطلوبة\"\n  },\n\n  // Shopping List\n  shoppingList: {\n    en: \"Shopping List\",\n    ar: \"قائمة التسوق\"\n  },\n\n  shoppingListEmpty: {\n    en: \"Your shopping list is empty\",\n    ar: \"قائمة التسوق فارغة\"\n  },\n  markCompleted: {\n    en: \"Mark as Completed\",\n    ar: \"تحديد كمكتمل\"\n  },\n  markIncomplete: {\n    en: \"Mark as Incomplete\", \n    ar: \"تحديد كغير مكتمل\"\n  },\n  clearCompleted: {\n    en: \"Clear Completed Items\",\n    ar: \"مسح العناصر المكتملة\"\n  },\n  addShoppingItem: {\n    en: \"Add Shopping Item\",\n    ar: \"إضافة عنصر للتسوق\"\n  },\n\n  // Pantry\n  pantry: {\n    en: \"Pantry\",\n    ar: \"المؤن\"\n  },\n  myPantry: {\n    en: \"My Pantry\",\n    ar: \"مؤنتي\"\n  },\n  addToPantry: {\n    en: \"Add to Pantry\",\n    ar: \"إضافة للمؤن\"\n  },\n  pantryEmpty: {\n    en: \"Your pantry is empty\",\n    ar: \"المؤن فارغة\"\n  },\n  expiryDate: {\n    en: \"Expiry Date\",\n    ar: \"تاريخ الانتهاء\"\n  },\n  location: {\n    en: \"Location\",\n    ar: \"المكان\"\n  },\n  minimumStock: {\n    en: \"Minimum Stock\",\n    ar: \"الحد الأدنى للمخزون\"\n  },\n  lowStock: {\n    en: \"Low Stock Alert\",\n    ar: \"تنبيه نقص المخزون\"\n  },\n  expiringSoon: {\n    en: \"Expiring Soon\",\n    ar: \"ينتهي قريباً\"\n  },\n  addPantryItem: {\n    en: \"Add Pantry Item\",\n    ar: \"إضافة عنصر للمؤن\"\n  },\n\n  // Common Fields\n  itemName: {\n    en: \"Item Name\",\n    ar: \"اسم العنصر\"\n  },\n  itemNameEn: {\n    en: \"Item Name (English)\",\n    ar: \"اسم العنصر (الإنجليزية)\"\n  },\n  itemNameAr: {\n    en: \"Item Name (Arabic)\",\n    ar: \"اسم العنصر (العربية)\"\n  },\n  quantity: {\n    en: \"Quantity\",\n    ar: \"الكمية\"\n  },\n  unit: {\n    en: \"Unit\",\n    ar: \"الوحدة\"\n  },\n  notes: {\n    en: \"Notes\",\n    ar: \"ملاحظات\"\n  },\n  \n  // Units\n  kg: {\n    en: \"Kilogram\",\n    ar: \"كيلوغرام\"\n  },\n  gram: {\n    en: \"Gram\",\n    ar: \"غرام\"\n  },\n  cup: {\n    en: \"Cup\",\n    ar: \"كوب\"\n  },\n  piece: {\n    en: \"Piece\",\n    ar: \"قطعة\"\n  },\n  liter: {\n    en: \"Liter\",\n    ar: \"لتر\"\n  },\n  tablespoon: {\n    en: \"Tablespoon\",\n    ar: \"ملعقة كبيرة\"\n  },\n  teaspoon: {\n    en: \"Teaspoon\",\n    ar: \"ملعقة صغيرة\"\n  },\n\n  // Storage Locations\n  fridge: {\n    en: \"Refrigerator\",\n    ar: \"الثلاجة\"\n  },\n  freezer: {\n    en: \"Freezer\",\n    ar: \"الفريزر\"\n  },\n  pantryLocation: {\n    en: \"Pantry\",\n    ar: \"المؤن\"\n  },\n  cabinet: {\n    en: \"Cabinet\",\n    ar: \"الخزانة\"\n  },\n\n  // Food Categories\n  vegetables: {\n    en: \"Vegetables\",\n    ar: \"خضروات\"\n  },\n  fruits: {\n    en: \"Fruits\",\n    ar: \"فواكه\"\n  },\n  meat: {\n    en: \"Meat\",\n    ar: \"لحوم\"\n  },\n  dairy: {\n    en: \"Dairy\",\n    ar: \"ألبان\"\n  },\n  grains: {\n    en: \"Grains\",\n    ar: \"حبوب\"\n  },\n  spices: {\n    en: \"Spices\",\n    ar: \"بهارات\"\n  },\n  beverages: {\n    en: \"Beverages\",\n    ar: \"مشروبات\"\n  },\n  other: {\n    en: \"Other\",\n    ar: \"أخرى\"\n  },\n\n  // Sync Features\n  sync: {\n    en: \"Sync\",\n    ar: \"مزامنة\"\n  },\n  syncData: {\n    en: \"Sync Data\",\n    ar: \"مزامنة البيانات\"\n  },\n  lastSynced: {\n    en: \"Last Synced\",\n    ar: \"آخر مزامنة\"\n  },\n  syncSuccessful: {\n    en: \"Data synced successfully\",\n    ar: \"تم مزامنة البيانات بنجاح\"\n  },\n  syncFailed: {\n    en: \"Sync failed\",\n    ar: \"فشلت المزامنة\"\n  },\n  autoSync: {\n    en: \"Auto Sync\",\n    ar: \"مزامنة تلقائية\"\n  },\n  syncInProgress: {\n    en: \"Syncing...\",\n    ar: \"جارٍ المزامنة...\"\n  },\n\n  // Additional translations for shopping and pantry\n  success: {\n    en: \"Success\",\n    ar: \"نجح\"\n  },\n  itemAdded: {\n    en: \"Item added successfully\",\n    ar: \"تم إضافة العنصر بنجاح\"\n  },\n  failedToAddItem: {\n    en: \"Failed to add item\",\n    ar: \"فشل في إضافة العنصر\"\n  },\n  itemDeleted: {\n    en: \"Item deleted successfully\",\n    ar: \"تم حذف العنصر بنجاح\"\n  },\n  completedItemsCleared: {\n    en: \"Completed items cleared successfully\",\n    ar: \"تم مسح العناصر المكتملة بنجاح\"\n  },\n  loading: {\n    en: \"Loading\",\n    ar: \"جارٍ التحميل\"\n  },\n  pending: {\n    en: \"Pending\",\n    ar: \"معلقة\"\n  },\n  completed: {\n    en: \"Completed\",\n    ar: \"مكتملة\"\n  },\n  more: {\n    en: \"more\",\n    ar: \"المزيد\"\n  },\n\n  // Additional sync translations\n  dataUpdated: {\n    en: \"Data has been updated\",\n    ar: \"تم تحديث البيانات\"\n  },\n  tryAgainLater: {\n    en: \"Please try again later\",\n    ar: \"يرجى المحاولة مرة أخرى لاحقاً\"\n  },\n  autoSyncEnabled: {\n    en: \"Auto sync enabled\",\n    ar: \"تم تفعيل المزامنة التلقائية\"\n  },\n  autoSyncDisabled: {\n    en: \"Auto sync disabled\",\n    ar: \"تم إيقاف المزامنة التلقائية\"\n  },\n  dataWillSyncAutomatically: {\n    en: \"Data will sync automatically every 5 minutes\",\n    ar: \"ستتم مزامنة البيانات تلقائياً كل 5 دقائق\"\n  },\n  manualSyncOnly: {\n    en: \"Manual sync only\",\n    ar: \"مزامنة يدوية فقط\"\n  },\n  justNow: {\n    en: \"Just now\",\n    ar: \"الآن\"\n  },\n  minutesAgo: {\n    en: \"m ago\",\n    ar: \"د مضت\"\n  },\n  hoursAgo: {\n    en: \"h ago\",\n    ar: \"س مضت\"\n  },\n  never: {\n    en: \"Never\",\n    ar: \"أبداً\"\n  },\n  disableAutoSync: {\n    en: \"Disable auto sync\",\n    ar: \"إيقاف المزامنة التلقائية\"\n  },\n  enableAutoSync: {\n    en: \"Enable auto sync\",\n    ar: \"تفعيل المزامنة التلقائية\"\n  },\n  manual: {\n    en: \"Manual\",\n    ar: \"يدوي\"\n  },\n\n  // Real-time sync translations\n  connectedToRealTimeSync: {\n    en: \"Connected to real-time sync\",\n    ar: \"متصل بالمزامنة الفورية\"\n  },\n  realTimeSync: {\n    en: \"Real-time\",\n    ar: \"فوري\"\n  },\n  offline: {\n    en: \"Offline\",\n    ar: \"غير متصل\"\n  },\n  connected: {\n    en: \"Connected\",\n    ar: \"متصل\"\n  },\n  disconnected: {\n    en: \"Disconnected\",\n    ar: \"غير متصل\"\n  },\n  reconnecting: {\n    en: \"Reconnecting\",\n    ar: \"جارٍ إعادة الاتصال\"\n  },\n  attemptingToReconnect: {\n    en: \"Attempting to reconnect to real-time sync\",\n    ar: \"محاولة إعادة الاتصال بالمزامنة الفورية\"\n  },\n  alreadyConnected: {\n    en: \"Already connected\",\n    ar: \"متصل بالفعل\"\n  },\n  realTimeSyncActive: {\n    en: \"Real-time sync is active\",\n    ar: \"المزامنة الفورية نشطة\"\n  },\n  recipeAdded: {\n    en: \"Recipe added\",\n    ar: \"تمت إضافة وصفة\"\n  },\n  newRecipeAvailable: {\n    en: \"A new recipe is now available\",\n    ar: \"وصفة جديدة متاحة الآن\"\n  },\n  recipeUpdated: {\n    en: \"Recipe updated\",\n    ar: \"تم تحديث الوصفة\"\n  },\n  recipeHasBeenModified: {\n    en: \"A recipe has been modified\",\n    ar: \"تم تعديل وصفة\"\n  },\n  recipeHasBeenRemoved: {\n    en: \"A recipe has been removed\",\n    ar: \"تم إزالة وصفة\"\n  },\n  newShoppingItemAdded: {\n    en: \"A new shopping item has been added\",\n    ar: \"تمت إضافة عنصر جديد لقائمة التسوق\"\n  },\n  itemUpdated: {\n    en: \"Item updated\",\n    ar: \"تم تحديث العنصر\"\n  },\n  shoppingItemModified: {\n    en: \"A shopping item has been modified\",\n    ar: \"تم تعديل عنصر في قائمة التسوق\"\n  },\n  shoppingItemRemoved: {\n    en: \"A shopping item has been removed\",\n    ar: \"تم إزالة عنصر من قائمة التسوق\"\n  },\n  itemToggled: {\n    en: \"Item toggled\",\n    ar: \"تم تغيير حالة العنصر\"\n  },\n  shoppingItemStatusChanged: {\n    en: \"Shopping item status has been changed\",\n    ar: \"تم تغيير حالة عنصر في قائمة التسوق\"\n  },\n  allCompletedItemsRemoved: {\n    en: \"All completed items have been removed\",\n    ar: \"تم إزالة جميع العناصر المكتملة\"\n  },\n  newPantryItemAdded: {\n    en: \"A new pantry item has been added\",\n    ar: \"تمت إضافة عنصر جديد للمخزن\"\n  },\n  pantryItemModified: {\n    en: \"A pantry item has been modified\",\n    ar: \"تم تعديل عنصر في المخزن\"\n  },\n  pantryItemRemoved: {\n    en: \"A pantry item has been removed\",\n    ar: \"تم إزالة عنصر من المخزن\"\n  },\n\n  // PWA Installation\n  installApp: {\n    en: \"Install App\",\n    ar: \"تثبيت التطبيق\"\n  },\n  installAppDescription: {\n    en: \"Install our app for a better experience with offline access and notifications\",\n    ar: \"ثبت تطبيقنا للحصول على تجربة أفضل مع الوصول بدون إنترنت والإشعارات\"\n  },\n  install: {\n    en: \"Install\",\n    ar: \"تثبيت\"\n  },\n  later: {\n    en: \"Later\", \n    ar: \"لاحقاً\"\n  },\n  appInstalled: {\n    en: \"App Installed\",\n    ar: \"تم تثبيت التطبيق\"\n  },\n  appInstalledSuccessfully: {\n    en: \"App has been installed successfully! You can now access it from your home screen.\",\n    ar: \"تم تثبيت التطبيق بنجاح! يمكنك الآن الوصول إليه من الشاشة الرئيسية.\"\n  },\n\n  // Rating System\n  ratingUpdated: {\n    en: \"Rating Updated\",\n    ar: \"تم تحديث التقييم\"\n  },\n  ratingUpdatedSuccessfully: {\n    en: \"Recipe rating has been updated successfully\",\n    ar: \"تم تحديث تقييم الوصفة بنجاح\"\n  },\n  failedToUpdateRating: {\n    en: \"Failed to update rating. Please try again.\",\n    ar: \"فشل في تحديث التقييم. يرجى المحاولة مرة أخرى.\"\n  },\n\n  // Sharing\n  shared: {\n    en: \"Shared\",\n    ar: \"تم المشاركة\"\n  },\n  recipeSharedSuccessfully: {\n    en: \"Recipe shared successfully\",\n    ar: \"تم مشاركة الوصفة بنجاح\"\n  },\n  copied: {\n    en: \"Copied\",\n    ar: \"تم النسخ\"\n  },\n  linkCopiedToClipboard: {\n    en: \"Recipe link copied to clipboard\",\n    ar: \"تم نسخ رابط الوصفة إلى الحافظة\"\n  },\n  failedToShare: {\n    en: \"Failed to share recipe. Please try again.\",\n    ar: \"فشل في مشاركة الوصفة. يرجى المحاولة مرة أخرى.\"\n  },\n  checkOutThisRecipe: {\n    en: \"Check out this recipe\",\n    ar: \"اطلع على هذه الوصفة\"\n  },\n  share: {\n    en: \"Share\",\n    ar: \"مشاركة\"\n  },\n\n  // Image Upload\n  recipeImagesUpload: {\n    en: \"Recipe Images\",\n    ar: \"صور الوصفة\"\n  },\n  images: {\n    en: \"images\",\n    ar: \"صور\"\n  },\n  addImage: {\n    en: \"Add Image\",\n    ar: \"إضافة صورة\"\n  },\n  maxImagesExceeded: {\n    en: \"Maximum number of images exceeded\",\n    ar: \"تم تجاوز العدد الأقصى للصور\"\n  },\n  pleaseSelectImageFiles: {\n    en: \"Please select image files only\",\n    ar: \"يرجى اختيار ملفات الصور فقط\"\n  },\n  fileTooLarge: {\n    en: \"File size too large. Maximum 5MB per image.\",\n    ar: \"حجم الملف كبير جداً. الحد الأقصى 5 ميجابايت للصورة الواحدة.\"\n  },\n  imagesUploadedSuccessfully: {\n    en: \"Images uploaded successfully\",\n    ar: \"تم رفع الصور بنجاح\"\n  },\n  failedToUploadImages: {\n    en: \"Failed to upload images. Please try again.\",\n    ar: \"فشل في رفع الصور. يرجى المحاولة مرة أخرى.\"\n  },\n  imageUploadInfo: {\n    en: \"Upload up to 5 images. Supported formats: JPG, PNG, GIF. Max 5MB per image.\",\n    ar: \"ارفع حتى 5 صور. الصيغ المدعومة: JPG, PNG, GIF. حد أقصى 5 ميجابايت للصورة.\"\n  },\n\n  // Email Sync\n  setupEmailSync: {\n    en: \"Setup Email Sync\",\n    ar: \"إعداد المزامنة بالإيميل\"\n  },\n  emailSyncDescription: {\n    en: \"Connect with your family members to sync recipes, shopping lists, and pantry items across all devices.\",\n    ar: \"اتصل مع أفراد عائلتك لمزامنة الوصفات وقوائم التسوق والمؤن عبر جميع الأجهزة.\"\n  },\n  yourEmail: {\n    en: \"Your Email\",\n    ar: \"إيميلك\"\n  },\n  yourName: {\n    en: \"Your Name\",\n    ar: \"اسمك\"\n  },\n  setupAccount: {\n    en: \"Setup Account\",\n    ar: \"إعداد الحساب\"\n  },\n  userCreatedSuccessfully: {\n    en: \"Account created successfully\",\n    ar: \"تم إنشاء الحساب بنجاح\"\n  },\n  failedToCreateUser: {\n    en: \"Failed to create account\",\n    ar: \"فشل في إنشاء الحساب\"\n  },\n  familySync: {\n    en: \"Family Sync\",\n    ar: \"مزامنة العائلة\"\n  },\n\n  addToShoppingList: {\n    en: \"Add to Shopping List\",\n    ar: \"إضافة لقائمة التسوق\"\n  },\n  ingredientsAddedToShoppingList: {\n    en: \"Ingredients added to shopping list\",\n    ar: \"تمت إضافة المكونات لقائمة التسوق\"\n  },\n  failedToAddToShoppingList: {\n    en: \"Failed to add to shopping list\",\n    ar: \"فشل في إضافة لقائمة التسوق\"\n  },\n  confirmDelete: {\n    en: \"Are you sure?\",\n    ar: \"هل أنت متأكد؟\"\n  },\n  deleteRecipeConfirmation: {\n    en: \"This action cannot be undone. This will permanently delete the recipe '{{recipeName}}'.\",\n    ar: \"هذا الإجراء لا يمكن التراجع عنه. سيتم حذف الوصفة '{{recipeName}}' نهائياً.\"\n  },\n  recipeDeletedSuccessfully: {\n    en: \"Recipe has been deleted successfully\",\n    ar: \"تم حذف الوصفة بنجاح\"\n  },\n  failedToDeleteRecipe: {\n    en: \"Failed to delete recipe\",\n    ar: \"فشل في حذف الوصفة\"\n  },\n  listView: {\n    en: \"List View\",\n    ar: \"عرض قائمة\"\n  },\n  groupedView: {\n    en: \"Grouped View\",\n    ar: \"عرض مجمع\"\n  },\n  notConnected: {\n    en: \"Not Connected\",\n    ar: \"غير متصل\"\n  },\n  members: {\n    en: \"members\",\n    ar: \"أعضاء\"\n  },\n  familyMembers: {\n    en: \"Family Members\",\n    ar: \"أفراد العائلة\"\n  },\n  setupFamilySync: {\n    en: \"Setup Family Sync\",\n    ar: \"إعداد مزامنة العائلة\"\n  },\n  createNewFamily: {\n    en: \"Create New Family\",\n    ar: \"إنشاء عائلة جديدة\"\n  },\n  familyGroupName: {\n    en: \"Family Group Name\",\n    ar: \"اسم مجموعة العائلة\"\n  },\n  createFamily: {\n    en: \"Create Family\",\n    ar: \"إنشاء العائلة\"\n  },\n  familyGroupCreated: {\n    en: \"Family group created successfully\",\n    ar: \"تم إنشاء مجموعة العائلة بنجاح\"\n  },\n  failedToCreateFamilyGroup: {\n    en: \"Failed to create family group\",\n    ar: \"فشل في إنشاء مجموعة العائلة\"\n  },\n  or: {\n    en: \"OR\",\n    ar: \"أو\"\n  },\n  joinExistingFamily: {\n    en: \"Join Existing Family\",\n    ar: \"انضم لعائلة موجودة\"\n  },\n  inviteCode: {\n    en: \"Invite Code\",\n    ar: \"رمز الدعوة\"\n  },\n  joinFamily: {\n    en: \"Join Family\",\n    ar: \"انضم للعائلة\"\n  },\n  joinedFamilyGroup: {\n    en: \"Successfully joined family group\",\n    ar: \"تم الانضمام لمجموعة العائلة بنجاح\"\n  },\n  failedToJoinFamilyGroup: {\n    en: \"Failed to join family group\",\n    ar: \"فشل في الانضمام لمجموعة العائلة\"\n  },\n  inviteCodeCopied: {\n    en: \"Invite code copied to clipboard\",\n    ar: \"تم نسخ رمز الدعوة للحافظة\"\n  },\n  pleaseEnterEmailAndName: {\n    en: \"Please enter both email and name\",\n    ar: \"يرجى إدخال الإيميل والاسم\"\n  }\n};\n\nexport function getTranslation(key: string, language: 'en' | 'ar'): string {\n  return translations[key]?.[language] || key;\n}\n","size_bytes":21691},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AddRecipe.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useUser } from '@/hooks/useUser';\nimport { Header } from '@/components/Header';\nimport { ImageUpload } from '@/components/ImageUpload';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Plus, Trash2, ArrowLeft } from 'lucide-react';\nimport { insertRecipeSchema } from '@shared/schema';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nconst formSchema = z.object({\n  nameEn: z.string().optional().default(''),\n  nameAr: z.string().optional().default(''),\n  descriptionEn: z.string().optional().default(''),\n  descriptionAr: z.string().optional().default(''),\n  country: z.string().optional().default(''),\n  servingTemperature: z.string().optional().default(''),\n  category: z.string().optional().default(''),\n  calories: z.number().optional().default(0),\n  prepTime: z.number().optional().default(0),\n  images: z.array(z.string()).optional().default([]),\n  videoUrl: z.string().optional().default(''),\n  instructionsEn: z.string().optional().default(''),\n  instructionsAr: z.string().optional().default(''),\n  ingredientsEn: z.array(z.object({\n    name: z.string().optional().default(''),\n    amount: z.string().optional().default(''),\n  })).optional().default([{ name: '', amount: '' }]),\n  ingredientsAr: z.array(z.object({\n    name: z.string().optional().default(''),\n    amount: z.string().optional().default(''),\n  })).optional().default([{ name: '', amount: '' }]),\n  toolsEn: z.array(z.string()).optional().default(['']) ,\n  toolsAr: z.array(z.string()).optional().default(['']) ,\n  additionalRecipes: z.array(z.object({\n    nameEn: z.string().optional().default(''),\n    nameAr: z.string().optional().default(''),\n    country: z.string().optional().default(''),\n    servingTemperature: z.string().optional().default(''),\n    category: z.string().optional().default(''),\n    instructionsEn: z.string().optional().default(''),\n    instructionsAr: z.string().optional().default(''),\n    ingredientsEn: z.array(z.object({\n      name: z.string().optional().default(''),\n      amount: z.string().optional().default(''),\n    })).optional().default([{ name: '', amount: '' }]),\n    ingredientsAr: z.array(z.object({\n      name: z.string().optional().default(''),\n      amount: z.string().optional().default(''),\n    })).optional().default([{ name: '', amount: '' }]),\n    toolsEn: z.array(z.string()).optional().default(['']),\n    toolsAr: z.array(z.string()).optional().default(['']),\n    servings: z.number().min(1).optional().default(4),\n    videoUrl: z.string().optional().default(''),\n    notes: z.string().optional().default(''),\n  })).optional().default([]),\n  rating: z.number().min(0).max(5).optional().default(0),\n  servings: z.number().min(1).optional().default(4),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function AddRecipe() {\n  const { t } = useLanguage();\n  const [, setLocation] = useLocation();\n  const { user } = useUser();\n  const [searchParams] = useState(new URLSearchParams(window.location.search));\n  const editId = searchParams.get('edit');\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      nameEn: '',\n      nameAr: '',\n      descriptionEn: '',\n      descriptionAr: '',\n      country: '',\n      servingTemperature: '',\n      category: '',\n      calories: undefined,\n      prepTime: undefined,\n      images: [],\n      videoUrl: '',\n      ingredientsEn: [{ name: '', amount: '' }],\n      ingredientsAr: [{ name: '', amount: '' }],\n      instructionsEn: '',\n      instructionsAr: '',\n      toolsEn: [''],\n      toolsAr: [''],\n      additionalRecipes: [],\n      rating: 0,\n      servings: 4,\n    },\n  });\n\n  // Load recipe data if editing\n  const { data: existingRecipe } = useQuery({\n    queryKey: ['/api/recipes', editId],\n    enabled: !!editId,\n    queryFn: async () => {\n      const response = await fetch(`/api/recipes/${editId}`);\n      if (!response.ok) throw new Error('Recipe not found');\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (existingRecipe) {\n      form.reset({\n        ...existingRecipe,\n        ingredientsEn: existingRecipe.ingredientsEn.length ? existingRecipe.ingredientsEn : [{ name: '', amount: '' }],\n        ingredientsAr: existingRecipe.ingredientsAr.length ? existingRecipe.ingredientsAr : [{ name: '', amount: '' }],\n        toolsEn: existingRecipe.toolsEn.length ? existingRecipe.toolsEn : [''],\n        toolsAr: existingRecipe.toolsAr.length ? existingRecipe.toolsAr : [''],\n        additionalLinks: existingRecipe.additionalLinks || [],\n      });\n    }\n  }, [existingRecipe, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: FormData) => apiRequest('POST', '/api/recipes', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/recipes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recipes', '', {}, user?.familyGroupId] });\n      setLocation('/');\n    },\n    onError: () => {\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: FormData) => apiRequest('PUT', `/api/recipes/${editId}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/recipes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recipes', editId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/recipes', '', {}, user?.familyGroupId] });\n      setLocation('/');\n    },\n    onError: () => {\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    // Filter out empty strings from arrays\n    const cleanedData = {\n      ...data,\n      ingredientsEn: (data.ingredientsEn || []).filter(ing => ing.name?.trim() && ing.amount?.trim()),\n      ingredientsAr: (data.ingredientsAr || []).filter(ing => ing.name?.trim() && ing.amount?.trim()),\n      toolsEn: (data.toolsEn || []).filter(tool => tool?.trim()),\n      toolsAr: (data.toolsAr || []).filter(tool => tool?.trim()),\n      additionalRecipes: (data.additionalRecipes || []),\n      // Add family group and user info for new recipes\n      ...(user && !editId && {\n        familyGroupId: user.familyGroupId || null,\n        createdBy: user.id\n      })\n    };\n\n    if (editId) {\n      updateMutation.mutate(cleanedData);\n    } else {\n      createMutation.mutate(cleanedData);\n    }\n  };\n\n  const countries = [\n    'egypt', 'lebanon', 'syria', 'morocco', 'italy', 'france', 'india', 'mexico', 'greece', 'turkey'\n  ];\n\n  const categories = [\n    'breakfast', 'lunch', 'dinner', 'snack', 'dessert', 'drink'\n  ];\n\n  const addIngredient = () => {\n    const currentEn = form.getValues('ingredientsEn');\n    const currentAr = form.getValues('ingredientsAr');\n    form.setValue('ingredientsEn', [...currentEn, { name: '', amount: '' }]);\n    form.setValue('ingredientsAr', [...currentAr, { name: '', amount: '' }]);\n  };\n\n  const removeIngredient = (index: number) => {\n    const currentEn = form.getValues('ingredientsEn');\n    const currentAr = form.getValues('ingredientsAr');\n    if (currentEn.length > 1) {\n      form.setValue('ingredientsEn', currentEn.filter((_, i) => i !== index));\n      form.setValue('ingredientsAr', currentAr.filter((_, i) => i !== index));\n    }\n  };\n\n  const addTool = () => {\n    const currentEn = form.getValues('toolsEn');\n    const currentAr = form.getValues('toolsAr');\n    form.setValue('toolsEn', [...currentEn, '']);\n    form.setValue('toolsAr', [...currentAr, '']);\n  };\n\n  const removeTool = (index: number) => {\n    const currentEn = form.getValues('toolsEn');\n    const currentAr = form.getValues('toolsAr');\n    if (currentEn.length > 1) {\n      form.setValue('toolsEn', currentEn.filter((_, i) => i !== index));\n      form.setValue('toolsAr', currentAr.filter((_, i) => i !== index));\n    }\n  };\n\n  const addRecipe = () => {\n    const current = form.getValues('additionalRecipes');\n    form.setValue('additionalRecipes', [...current, {\n      nameEn: '',\n      nameAr: '',\n      country: '',\n      servingTemperature: '',\n      category: '',\n      instructionsEn: '',\n      instructionsAr: '',\n      ingredientsEn: [{ name: '', amount: '' }],\n      ingredientsAr: [{ name: '', amount: '' }],\n      toolsEn: [''],\n      toolsAr: [''],\n      servings: 4,\n      videoUrl: '',\n      notes: ''\n    }]);\n  };\n\n  const removeRecipe = (index: number) => {\n    const current = form.getValues('additionalRecipes');\n    form.setValue('additionalRecipes', current.filter((_, i) => i !== index));\n  };\n\n  const addIngredientToRecipe = (recipeIndex: number, language: 'en' | 'ar') => {\n    const fieldName = language === 'en' ? 'ingredientsEn' : 'ingredientsAr';\n    const current = form.getValues(`additionalRecipes.${recipeIndex}.${fieldName}`);\n    form.setValue(`additionalRecipes.${recipeIndex}.${fieldName}`, [...current, { name: '', amount: '' }]);\n  };\n\n  const removeIngredientFromRecipe = (recipeIndex: number, ingredientIndex: number, language: 'en' | 'ar') => {\n    const fieldName = language === 'en' ? 'ingredientsEn' : 'ingredientsAr';\n    const current = form.getValues(`additionalRecipes.${recipeIndex}.${fieldName}`);\n    form.setValue(`additionalRecipes.${recipeIndex}.${fieldName}`, current.filter((_, i) => i !== ingredientIndex));\n  };\n\n  const addToolToRecipe = (recipeIndex: number, language: 'en' | 'ar') => {\n    const fieldName = language === 'en' ? 'toolsEn' : 'toolsAr';\n    const current = form.getValues(`additionalRecipes.${recipeIndex}.${fieldName}`);\n    form.setValue(`additionalRecipes.${recipeIndex}.${fieldName}`, [...current, '']);\n  };\n\n  const removeToolFromRecipe = (recipeIndex: number, toolIndex: number, language: 'en' | 'ar') => {\n    const fieldName = language === 'en' ? 'toolsEn' : 'toolsAr';\n    const current = form.getValues(`additionalRecipes.${recipeIndex}.${fieldName}`);\n    form.setValue(`additionalRecipes.${recipeIndex}.${fieldName}`, current.filter((_, i) => i !== toolIndex));\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <div className=\"h-full bg-background flex flex-col overflow-hidden\">\n      <Header />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center space-x-4 rtl:space-x-reverse mb-6\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => setLocation('/')}\n              data-testid=\"back-button\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <h1 className=\"text-2xl font-bold text-foreground\">\n              {editId ? t('editRecipe') : t('addNewRecipe')}\n            </h1>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  {/* Basic Information */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"nameEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('recipeNameEn')}</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder={t('enterRecipeNameEn')}\n                              {...field}\n                              data-testid=\"recipe-name-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"nameAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('recipeNameAr')}</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder={t('enterRecipeNameAr')}\n                              className=\"text-right\"\n                              {...field}\n                              data-testid=\"recipe-name-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"country\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('countryOfOrigin')}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"country-select\">\n                                <SelectValue placeholder={t('selectCountry')} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {countries.map((country) => (\n                                <SelectItem key={country} value={country}>\n                                  {t(country)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"servingTemperature\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('servingTemperature')}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"temperature-select\">\n                                <SelectValue placeholder={t('selectTemperature')} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"hot\">{t('hot')}</SelectItem>\n                              <SelectItem value=\"cold\">{t('cold')}</SelectItem>\n                              <SelectItem value=\"room_temp\">{t('roomTemp')}</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"category-select\">\n                                <SelectValue placeholder={t('selectCategory')} />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category} value={category}>\n                                  {t(category)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"calories\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('calories')}</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              value={field.value || ''}\n                              onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                              data-testid=\"calories-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"prepTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('prepTime')}</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"0\"\n                              value={field.value || ''}\n                              onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                              data-testid=\"prep-time-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"servings\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Number of Servings</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              value={field.value || ''}\n                              onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                              data-testid=\"servings-input\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Description */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"descriptionEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (English)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Brief description in English...\"\n                              value={field.value || ''}\n                              onChange={field.onChange}\n                              data-testid=\"description-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"descriptionAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>الوصف (العربية)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"وصف مختصر بالعربية...\"\n                              className=\"text-right\"\n                              value={field.value || ''}\n                              onChange={field.onChange}\n                              data-testid=\"description-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Video URL */}\n                  <FormField\n                    control={form.control}\n                    name=\"videoUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t('videoTutorial')}</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"url\"\n                            placeholder=\"https://youtube.com/watch?v=...\"\n                            value={field.value || ''}\n                            onChange={field.onChange}\n                            data-testid=\"video-url\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Recipe Images */}\n                  <FormField\n                    control={form.control}\n                    name=\"images\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <ImageUpload\n                            images={field.value || []}\n                            onImagesChange={field.onChange}\n                            maxImages={5}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Ingredients */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">{t('ingredients')}</h3>\n                    {form.watch('ingredientsEn').map((_, index) => (\n                      <div key={index} className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name={`ingredientsEn.${index}.name`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Name (English)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Ingredient name\"\n                                  {...field}\n                                  data-testid={`ingredient-en-name-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`ingredientsAr.${index}.name`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>الاسم (العربية)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"اسم المكون\"\n                                  className=\"text-right\"\n                                  {...field}\n                                  data-testid={`ingredient-ar-name-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`ingredientsEn.${index}.amount`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Amount (EN)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"2 cups\"\n                                  {...field}\n                                  data-testid={`ingredient-en-amount-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`ingredientsAr.${index}.amount`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>الكمية (العربية)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"كوبان\"\n                                  className=\"text-right\"\n                                  {...field}\n                                  data-testid={`ingredient-ar-amount-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex items-end\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => removeIngredient(index)}\n                            disabled={form.watch('ingredientsEn').length === 1}\n                            data-testid={`remove-ingredient-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={addIngredient}\n                      className=\"mb-4\"\n                      data-testid=\"add-ingredient\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2 rtl:mr-0 rtl:ml-2\" />\n                      {t('add')} Ingredient\n                    </Button>\n                  </div>\n\n                  {/* Instructions */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"instructionsEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('instructionsEn')}</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              rows={8}\n                              placeholder={t('stepByStepEn')}\n                              {...field}\n                              data-testid=\"instructions-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"instructionsAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('instructionsAr')}</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              rows={8}\n                              placeholder={t('stepByStepAr')}\n                              className=\"text-right\"\n                              {...field}\n                              data-testid=\"instructions-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  {/* Tools */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">{t('requiredTools')}</h3>\n                    {form.watch('toolsEn').map((_, index) => (\n                      <div key={index} className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                        <FormField\n                          control={form.control}\n                          name={`toolsEn.${index}`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Tool Name (English)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Large pot\"\n                                  {...field}\n                                  data-testid={`tool-en-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name={`toolsAr.${index}`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>اسم الأداة (العربية)</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  placeholder=\"قدر كبير\"\n                                  className=\"text-right\"\n                                  {...field}\n                                  data-testid={`tool-ar-${index}`}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex items-end\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => removeTool(index)}\n                            disabled={form.watch('toolsEn').length === 1}\n                            data-testid={`remove-tool-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={addTool}\n                      className=\"mb-4\"\n                      data-testid=\"add-tool\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2 rtl:mr-0 rtl:ml-2\" />\n                      {t('add')} Tool\n                    </Button>\n                  </div>\n\n                  {/* Additional Recipes */}\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-4\">Additional Recipes</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Add alternative recipes, side dishes, or variations for the same meal\n                    </p>\n                    {form.watch('additionalRecipes').map((_, index) => (\n                      <Card key={index} className=\"p-6 mb-4\">\n                        <div className=\"flex justify-between items-center mb-4\">\n                          <h4 className=\"text-md font-semibold\">Recipe #{index + 1}</h4>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => removeRecipe(index)}\n                            data-testid={`remove-recipe-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n\n                        {/* Recipe Names */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.nameEn`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Recipe Name (English)</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Alternative recipe name\"\n                                    {...field}\n                                    data-testid={`recipe-name-en-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.nameAr`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>اسم الوصفة (العربية)</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"اسم الوصفة البديلة\"\n                                    className=\"text-right\"\n                                    {...field}\n                                    data-testid={`recipe-name-ar-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Recipe Details */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.country`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Country</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Italy\"\n                                    {...field}\n                                    data-testid={`recipe-country-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.servingTemperature`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Temperature</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid={`recipe-temp-${index}`}>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"hot\">Hot</SelectItem>\n                                    <SelectItem value=\"cold\">Cold</SelectItem>\n                                    <SelectItem value=\"room\">Room temp</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.category`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Category</FormLabel>\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid={`recipe-category-${index}`}>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"breakfast\">Breakfast</SelectItem>\n                                    <SelectItem value=\"lunch\">Lunch</SelectItem>\n                                    <SelectItem value=\"dinner\">Dinner</SelectItem>\n                                    <SelectItem value=\"snack\">Snack</SelectItem>\n                                    <SelectItem value=\"dessert\">Dessert</SelectItem>\n                                    <SelectItem value=\"drink\">Drink</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.servings`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Servings</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"number\"\n                                    min=\"1\"\n                                    value={field.value || ''}\n                                    onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                    data-testid={`recipe-servings-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Instructions */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.instructionsEn`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Instructions (English)</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    placeholder=\"Cooking instructions in English...\"\n                                    rows={4}\n                                    {...field}\n                                    data-testid={`recipe-instructions-en-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.instructionsAr`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>التعليمات (العربية)</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    placeholder=\"تعليمات الطبخ بالعربية...\"\n                                    className=\"text-right\"\n                                    rows={4}\n                                    {...field}\n                                    data-testid={`recipe-instructions-ar-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Video URL and Notes */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.videoUrl`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Video Tutorial</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"url\"\n                                    placeholder=\"https://youtube.com/...\"\n                                    {...field}\n                                    data-testid={`recipe-video-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`additionalRecipes.${index}.notes`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Notes</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Additional notes or tips...\"\n                                    {...field}\n                                    data-testid={`recipe-notes-${index}`}\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        {/* Ingredients for Additional Recipe */}\n                        <div className=\"mb-4\">\n                          <h5 className=\"font-medium mb-2\">Ingredients</h5>\n                          {form.watch(`additionalRecipes.${index}.ingredientsEn`).map((_, ingredientIndex) => (\n                            <div key={ingredientIndex} className=\"grid grid-cols-1 md:grid-cols-5 gap-2 mb-2\">\n                              <FormField\n                                control={form.control}\n                                name={`additionalRecipes.${index}.ingredientsEn.${ingredientIndex}.name`}\n                                render={({ field }) => (\n                                  <FormControl>\n                                    <Input\n                                      placeholder=\"Ingredient\"\n                                      {...field}\n                                      data-testid={`recipe-ingredient-en-name-${index}-${ingredientIndex}`}\n                                    />\n                                  </FormControl>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name={`additionalRecipes.${index}.ingredientsEn.${ingredientIndex}.amount`}\n                                render={({ field }) => (\n                                  <FormControl>\n                                    <Input\n                                      placeholder=\"Amount\"\n                                      {...field}\n                                      data-testid={`recipe-ingredient-en-amount-${index}-${ingredientIndex}`}\n                                    />\n                                  </FormControl>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name={`additionalRecipes.${index}.ingredientsAr.${ingredientIndex}.name`}\n                                render={({ field }) => (\n                                  <FormControl>\n                                    <Input\n                                      placeholder=\"المكون\"\n                                      className=\"text-right\"\n                                      {...field}\n                                      data-testid={`recipe-ingredient-ar-name-${index}-${ingredientIndex}`}\n                                    />\n                                  </FormControl>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name={`additionalRecipes.${index}.ingredientsAr.${ingredientIndex}.amount`}\n                                render={({ field }) => (\n                                  <FormControl>\n                                    <Input\n                                      placeholder=\"الكمية\"\n                                      className=\"text-right\"\n                                      {...field}\n                                      data-testid={`recipe-ingredient-ar-amount-${index}-${ingredientIndex}`}\n                                    />\n                                  </FormControl>\n                                )}\n                              />\n                              <div className=\"flex gap-1\">\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"icon\"\n                                  onClick={() => removeIngredientFromRecipe(index, ingredientIndex, 'en')}\n                                  data-testid={`remove-recipe-ingredient-${index}-${ingredientIndex}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                          ))}\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => addIngredientToRecipe(index, 'en')}\n                            className=\"mb-4\"\n                            data-testid={`add-recipe-ingredient-${index}`}\n                          >\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Add Ingredient\n                          </Button>\n                        </div>\n\n                        {/* Tools for Additional Recipe */}\n                        <div className=\"mb-4\">\n                          <h5 className=\"font-medium mb-2\">Tools</h5>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div>\n                              <div className=\"text-sm font-medium mb-2\">English</div>\n                              {form.watch(`additionalRecipes.${index}.toolsEn`).map((_, toolIndex) => (\n                                <div key={toolIndex} className=\"flex gap-2 mb-2\">\n                                  <FormField\n                                    control={form.control}\n                                    name={`additionalRecipes.${index}.toolsEn.${toolIndex}`}\n                                    render={({ field }) => (\n                                      <FormControl>\n                                        <Input\n                                          placeholder=\"Kitchen tool\"\n                                          {...field}\n                                          data-testid={`recipe-tool-en-${index}-${toolIndex}`}\n                                        />\n                                      </FormControl>\n                                    )}\n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"icon\"\n                                    onClick={() => removeToolFromRecipe(index, toolIndex, 'en')}\n                                    data-testid={`remove-recipe-tool-en-${index}-${toolIndex}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              ))}\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => addToolToRecipe(index, 'en')}\n                                className=\"mb-2\"\n                                data-testid={`add-recipe-tool-en-${index}`}\n                              >\n                                <Plus className=\"w-4 h-4 mr-2\" />\n                                Add Tool\n                              </Button>\n                            </div>\n\n                            <div>\n                              <div className=\"text-sm font-medium mb-2\">العربية</div>\n                              {form.watch(`additionalRecipes.${index}.toolsAr`).map((_, toolIndex) => (\n                                <div key={toolIndex} className=\"flex gap-2 mb-2\">\n                                  <FormField\n                                    control={form.control}\n                                    name={`additionalRecipes.${index}.toolsAr.${toolIndex}`}\n                                    render={({ field }) => (\n                                      <FormControl>\n                                        <Input\n                                          placeholder=\"أداة المطبخ\"\n                                          className=\"text-right\"\n                                          {...field}\n                                          data-testid={`recipe-tool-ar-${index}-${toolIndex}`}\n                                        />\n                                      </FormControl>\n                                    )}\n                                  />\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"icon\"\n                                    onClick={() => removeToolFromRecipe(index, toolIndex, 'ar')}\n                                    data-testid={`remove-recipe-tool-ar-${index}-${toolIndex}`}\n                                  >\n                                    <Trash2 className=\"w-4 h-4\" />\n                                  </Button>\n                                </div>\n                              ))}\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => addToolToRecipe(index, 'ar')}\n                                className=\"mb-2\"\n                                data-testid={`add-recipe-tool-ar-${index}`}\n                              >\n                                <Plus className=\"w-4 h-4 mr-2\" />\n                                Add Tool\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={addRecipe}\n                      className=\"mb-4\"\n                      data-testid=\"add-recipe\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2 rtl:mr-0 rtl:ml-2\" />\n                      Add Recipe\n                    </Button>\n                  </div>\n\n                  {/* Form Actions */}\n                  <div className=\"flex justify-end space-x-4 rtl:space-x-reverse pt-6 border-t\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setLocation('/')}\n                      disabled={isLoading}\n                      data-testid=\"cancel-button\"\n                    >\n                      {t('cancel')}\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      data-testid=\"save-recipe-button\"\n                    >\n                      {isLoading ? 'Saving...' : editId ? t('save') : t('save')}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":53932},"client/src/pages/Home.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useUser } from '@/hooks/useUser';\nimport { Header } from '@/components/Header';\nimport { SearchFilters } from '@/components/SearchFilters';\nimport { RecipeCard } from '@/components/RecipeCard';\nimport { RecipeDetailModal } from '@/components/RecipeDetailModal';\nimport { EmailSync } from '@/components/EmailSync';\nimport { Button } from '@/components/ui/button';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Plus } from 'lucide-react';\nimport { Recipe } from '@shared/schema';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function Home() {\n  const { t } = useLanguage();\n  const { user } = useUser();\n  const [, setLocation] = useLocation();\n  const [selectedRecipe, setSelectedRecipe] = useState<Recipe | null>(null);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<{\n    country?: string;\n    servingTemperature?: string;\n    category?: string;\n    rating?: number;\n  }>({});\n\n  const { data: recipes = [], isLoading, refetch } = useQuery({\n    queryKey: ['/api/recipes', searchQuery, filters],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (searchQuery) params.append('search', searchQuery);\n      if (filters.country) params.append('country', filters.country);\n      if (filters.servingTemperature) params.append('servingTemperature', filters.servingTemperature);\n      if (filters.category) params.append('category', filters.category);\n      if (filters.rating) params.append('rating', filters.rating.toString());\n      // Remove family group filter for now to see all recipes\n      // if (user?.familyGroupId) params.append('familyGroupId', user.familyGroupId);\n      \n      const queryString = params.toString();\n      const url = `/api/recipes${queryString ? `?${queryString}` : ''}`;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Failed to fetch recipes');\n      }\n      const data = await response.json();\n      console.log('✅ Recipes fetched:', data.length, 'recipes');\n      console.log('📋 Recipe data:', data);\n      return data;\n    },\n    enabled: true, // Always fetch recipes\n  });\n\n  console.log('🏠 Home component render - recipes:', recipes?.length || 0);\n\n  const handleViewRecipe = (recipe: Recipe) => {\n    console.log('🔄 Opening recipe modal for:', recipe.nameEn || recipe.nameAr);\n    console.log('🔄 Full recipe object:', recipe);\n    setSelectedRecipe(recipe);\n    setIsDetailModalOpen(true);\n    console.log('🔄 Modal state set to open');\n  };\n\n  const handleEditRecipe = (recipe: Recipe) => {\n    setLocation(`/add?edit=${recipe.id}`);\n  };\n\n  const handleDeleteRecipe = async (id: string) => {\n    try {\n      await apiRequest('DELETE', `/api/recipes/${id}`);\n      refetch();\n    } catch (error) {\n    }\n  };\n\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  const handleFilter = (newFilters: typeof filters) => {\n    setFilters(newFilters);\n  };\n\n  return (\n    <div className=\"h-full bg-background flex flex-col overflow-hidden\">\n      <Header />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto px-4 py-6\">\n        <EmailSync />\n        <SearchFilters onSearch={handleSearch} onFilter={handleFilter} currentFilters={filters} />\n\n        {/* Add Recipe Button */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"recipes-title\">\n            {t('recipes')}\n          </h2>\n          <Button \n            onClick={() => setLocation('/add')}\n            className=\"flex items-center space-x-2 rtl:space-x-reverse shadow-md\"\n            data-testid=\"add-recipe-button\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>{t('addNewRecipe')}</span>\n          </Button>\n        </div>\n\n        {/* Recipe Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <div key={i} className=\"space-y-4 bg-white dark:bg-gray-800 rounded-lg p-4 shadow\">\n                <div className=\"h-48 w-full bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                <div className=\"h-4 w-3/4 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                <div className=\"h-4 w-1/2 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                <div className=\"flex space-x-2\">\n                  <div className=\"h-8 flex-1 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                  <div className=\"h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                  <div className=\"h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : recipes && Array.isArray(recipes) && recipes.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8\" data-testid=\"recipes-grid\">\n            {recipes.map((recipe: Recipe) => {\n              console.log('Rendering recipe card:', recipe.nameEn || recipe.nameAr);\n              return (\n                <RecipeCard\n                  key={recipe.id}\n                  recipe={recipe}\n                  onView={handleViewRecipe}\n                  onEdit={handleEditRecipe}\n                  onDelete={handleDeleteRecipe}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\" data-testid=\"no-recipes\">\n            <div className=\"text-6xl mb-4\">🍽️</div>\n            <h3 className=\"text-xl font-semibold mb-2\">{t('noRecipesFound')}</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Start by adding your first recipe!\n            </p>\n            <Button \n              onClick={() => setLocation('/add')}\n              className=\"flex items-center space-x-2 rtl:space-x-reverse mx-auto\"\n              data-testid=\"add-first-recipe\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>{t('addNewRecipe')}</span>\n            </Button>\n          </div>\n        )}\n        </div>\n      </main>\n\n      <RecipeDetailModal\n        recipe={selectedRecipe}\n        isOpen={isDetailModalOpen}\n        onClose={() => {\n          console.log('Closing recipe modal');\n          setIsDetailModalOpen(false);\n        }}\n        onEdit={handleEditRecipe}\n      />\n    </div>\n  );\n}\n","size_bytes":6810},"client/src/pages/Pantry.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { useUser } from '@/hooks/useUser';\nimport { Header } from '@/components/Header';\nimport { Plus, Trash2, Package, AlertTriangle, Calendar, MapPin } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { insertPantrySchema } from '@shared/schema';\n\nconst formSchema = z.object({\n  itemNameEn: z.string().optional().default(''),\n  itemNameAr: z.string().optional().default(''),\n  quantity: z.string().optional().default(''),\n  unit: z.string().optional().default(''),\n  category: z.string().optional().default(''),\n  expiryDate: z.string().optional().default(''),\n  location: z.string().optional().default(''),\n  notes: z.string().optional().default(''),\n  minimumStock: z.string().optional().default(''),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function Pantry() {\n  const { language, t, isRtl } = useLanguage();\n  const { user } = useUser();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      itemNameEn: '',\n      itemNameAr: '',\n      quantity: '',\n      unit: '',\n      category: '',\n      expiryDate: '',\n      location: '',\n      notes: '',\n      minimumStock: '',\n    },\n  });\n\n  // Fetch pantry items\n  const { data: pantryItems = [], isLoading } = useQuery({\n    queryKey: ['/api/pantry', user?.familyGroupId],\n    queryFn: () => {\n      const url = user?.familyGroupId \n        ? `/api/pantry?familyGroupId=${user.familyGroupId}`\n        : '/api/pantry?familyGroupId=';\n      return fetch(url).then(res => res.json());\n    },\n    enabled: !!user,\n  });\n\n  // Fetch low stock items\n  const { data: lowStockItems = [] } = useQuery({\n    queryKey: ['/api/pantry/low-stock'],\n  });\n\n  // Fetch expiring soon items\n  const { data: expiringSoonItems = [] } = useQuery({\n    queryKey: ['/api/pantry/expiring-soon'],\n  });\n\n  const pantryArray = Array.isArray(pantryItems) ? pantryItems : [];\n  const lowStockArray = Array.isArray(lowStockItems) ? lowStockItems : [];\n  const expiringSoonArray = Array.isArray(expiringSoonItems) ? expiringSoonItems : [];\n\n  // Add item mutation\n  const addMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const processedData = {\n        ...data,\n        expiryDate: data.expiryDate ? new Date(data.expiryDate).toISOString() : undefined,\n      };\n      const response = await apiRequest('POST', '/api/pantry', processedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry', user?.familyGroupId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry/low-stock'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry/expiring-soon'] });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: () => {\n    },\n  });\n\n  // Delete item mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/pantry/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry', user?.familyGroupId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry/low-stock'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry/expiring-soon'] });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    addMutation.mutate(data);\n  };\n\n  const isExpiringSoon = (expiryDate: string | null) => {\n    if (!expiryDate) return false;\n    const sevenDaysFromNow = new Date();\n    sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);\n    return new Date(expiryDate) <= sevenDaysFromNow;\n  };\n\n  const isLowStock = (item: any) => {\n    if (!item.minimumStock || !item.quantity) return false;\n    const currentQuantity = parseFloat(item.quantity);\n    const minStock = parseFloat(item.minimumStock);\n    return !isNaN(currentQuantity) && !isNaN(minStock) && currentQuantity <= minStock;\n  };\n\n  return (\n    <div className={`h-full bg-gray-50 dark:bg-gray-900 ${isRtl ? 'rtl' : 'ltr'} flex flex-col overflow-hidden`}>\n      <Header />\n      \n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Package className=\"h-8 w-8 text-green-600\" />\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              {t('myPantry')}\n            </h1>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"add-pantry-item-button\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {t('addPantryItem')}\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>{t('addPantryItem')}</DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"itemNameEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('itemNameEn')}</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"item-name-en-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"itemNameAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('itemNameAr')}</FormLabel>\n                          <FormControl>\n                            <Input {...field} className=\"text-right\" data-testid=\"item-name-ar-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"quantity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t('quantity')}</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"quantity-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"unit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t('unit')}</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"unit-select\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"kg\">{t('kg')}</SelectItem>\n                                <SelectItem value=\"gram\">{t('gram')}</SelectItem>\n                                <SelectItem value=\"liter\">{t('liter')}</SelectItem>\n                                <SelectItem value=\"cup\">{t('cup')}</SelectItem>\n                                <SelectItem value=\"piece\">{t('piece')}</SelectItem>\n                                <SelectItem value=\"tablespoon\">{t('tablespoon')}</SelectItem>\n                                <SelectItem value=\"teaspoon\">{t('teaspoon')}</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('category')}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"category-select\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"vegetables\">{t('vegetables')}</SelectItem>\n                              <SelectItem value=\"fruits\">{t('fruits')}</SelectItem>\n                              <SelectItem value=\"meat\">{t('meat')}</SelectItem>\n                              <SelectItem value=\"dairy\">{t('dairy')}</SelectItem>\n                              <SelectItem value=\"grains\">{t('grains')}</SelectItem>\n                              <SelectItem value=\"spices\">{t('spices')}</SelectItem>\n                              <SelectItem value=\"beverages\">{t('beverages')}</SelectItem>\n                              <SelectItem value=\"other\">{t('other')}</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('location')}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"location-select\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"fridge\">{t('fridge')}</SelectItem>\n                              <SelectItem value=\"freezer\">{t('freezer')}</SelectItem>\n                              <SelectItem value=\"pantryLocation\">{t('pantryLocation')}</SelectItem>\n                              <SelectItem value=\"cabinet\">{t('cabinet')}</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"expiryDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('expiryDate')}</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"expiry-date-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"minimumStock\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('minimumStock')}</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"minimum-stock-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('notes')}</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} rows={2} data-testid=\"notes-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"flex justify-end gap-2\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      {t('cancel')}\n                    </Button>\n                    <Button type=\"submit\" disabled={addMutation.isPending} data-testid=\"save-item-button\">\n                      {t('save')}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Alerts */}\n        {(lowStockArray.length > 0 || expiringSoonArray.length > 0) && (\n          <div className=\"mb-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {lowStockArray.length > 0 && (\n              <Card className=\"border-orange-200 bg-orange-50 dark:bg-orange-900/20\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-orange-800 dark:text-orange-200\">\n                    <AlertTriangle className=\"h-5 w-5\" />\n                    {t('lowStock')} ({lowStockArray.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {lowStockArray.slice(0, 3).map((item: any) => (\n                      <div key={item.id} className=\"text-sm text-orange-700 dark:text-orange-300\">\n                        {language === 'ar' ? item.itemNameAr || item.itemNameEn : item.itemNameEn || item.itemNameAr}\n                      </div>\n                    ))}\n                    {lowStockArray.length > 3 && (\n                      <div className=\"text-xs text-orange-600 dark:text-orange-400\">\n                        +{lowStockArray.length - 3} {t('more')}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {expiringSoonArray.length > 0 && (\n              <Card className=\"border-red-200 bg-red-50 dark:bg-red-900/20\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-red-800 dark:text-red-200\">\n                    <Calendar className=\"h-5 w-5\" />\n                    {t('expiringSoon')} ({expiringSoonArray.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {expiringSoonArray.slice(0, 3).map((item: any) => (\n                      <div key={item.id} className=\"text-sm text-red-700 dark:text-red-300\">\n                        {language === 'ar' ? item.itemNameAr || item.itemNameEn : item.itemNameEn || item.itemNameAr}\n                      </div>\n                    ))}\n                    {expiringSoonArray.length > 3 && (\n                      <div className=\"text-xs text-red-600 dark:text-red-400\">\n                        +{expiringSoonArray.length - 3} {t('more')}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"text-gray-500\">{t('loading')}...</div>\n          </div>\n        ) : pantryArray.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12\">\n              <div className=\"text-center text-gray-500\">\n                <Package className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg\">{t('pantryEmpty')}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {pantryArray.map((item: any) => (\n              <Card key={item.id} className=\"relative\" data-testid={`pantry-item-${item.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <CardTitle className=\"text-lg\">\n                      {language === 'ar' ? item.itemNameAr || item.itemNameEn : item.itemNameEn || item.itemNameAr}\n                    </CardTitle>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(item.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`delete-item-${item.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex gap-2 flex-wrap\">\n                    {isLowStock(item) && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">\n                        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                        {t('lowStock')}\n                      </Badge>\n                    )}\n                    {isExpiringSoon(item.expiryDate) && (\n                      <Badge variant=\"destructive\" className=\"text-xs\">\n                        <Calendar className=\"h-3 w-3 mr-1\" />\n                        {t('expiringSoon')}\n                      </Badge>\n                    )}\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">{t('quantity')}:</span>\n                      <span>{item.quantity} {item.unit && t(item.unit)}</span>\n                    </div>\n                    \n                    {item.category && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">{t('category')}:</span>\n                        <span>{t(item.category)}</span>\n                      </div>\n                    )}\n                    \n                    {item.location && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">{t('location')}:</span>\n                        <span className=\"flex items-center gap-1\">\n                          <MapPin className=\"h-3 w-3\" />\n                          {t(item.location)}\n                        </span>\n                      </div>\n                    )}\n                    \n                    {item.expiryDate && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">{t('expiryDate')}:</span>\n                        <span className={isExpiringSoon(item.expiryDate) ? 'text-red-600' : ''}>\n                          {new Date(item.expiryDate).toLocaleDateString()}\n                        </span>\n                      </div>\n                    )}\n                    \n                    {item.minimumStock && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">{t('minimumStock')}:</span>\n                        <span>{item.minimumStock}</span>\n                      </div>\n                    )}\n                    \n                    {item.notes && (\n                      <div className=\"mt-3 p-2 bg-gray-50 dark:bg-gray-700 rounded text-xs\">\n                        {item.notes}\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21757},"client/src/pages/ShoppingList.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Header } from '@/components/Header';\nimport { useUser } from '@/hooks/useUser';\nimport { Plus, Trash2, ShoppingCart, Check } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { combineIngredients, groupIngredientsByCategory, processIngredients, formatAmount } from '@/utils/ingredientUtils';\n\nconst formSchema = z.object({\n  itemNameEn: z.string().optional().default(''),\n  itemNameAr: z.string().optional().default(''),\n  quantity: z.string().optional().default(''),\n  unit: z.string().optional().default(''),\n  category: z.string().optional().default(''),\n  notes: z.string().optional().default(''),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function ShoppingList() {\n  const { language, t, isRtl } = useLanguage();\n  const { user } = useUser();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [viewMode, setViewMode] = useState<'grouped' | 'list'>('grouped');\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      itemNameEn: '',\n      itemNameAr: '',\n      quantity: '',\n      unit: '',\n      category: '',\n      notes: '',\n    },\n  });\n\n  // Fetch shopping list\n  const { data: shoppingItems = [], isLoading } = useQuery({\n    queryKey: ['/api/shopping', user?.familyGroupId],\n    queryFn: () => {\n      // In demo mode (no user), fetch items with null familyGroupId\n      const url = user?.familyGroupId \n        ? `/api/shopping?familyGroupId=${user.familyGroupId}`\n        : '/api/shopping?familyGroupId=';\n      return fetch(url).then(res => res.json());\n    },\n    enabled: !!user, // Only fetch when user is loaded\n  });\n\n  // Add item mutation\n  const addMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest('POST', '/api/shopping', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: () => {\n    },\n  });\n\n  // Toggle completion mutation\n  const toggleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('PATCH', `/api/shopping/${id}/toggle`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n    },\n  });\n\n  // Delete item mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('DELETE', `/api/shopping/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n    },\n  });\n\n  // Mark as bought and move to pantry mutation\n  const markAsBoughtMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest('POST', `/api/shopping/${id}/buy`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/pantry', user?.familyGroupId] });\n      // No more toast messages - just visual feedback\n    },\n  });\n\n  // Clear completed mutation\n  const clearCompletedMutation = useMutation({\n    mutationFn: async () => {\n      const url = user?.familyGroupId \n        ? `/api/shopping/completed?familyGroupId=${user.familyGroupId}`\n        : '/api/shopping/completed';\n      const response = await apiRequest('DELETE', url);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/shopping', user?.familyGroupId] });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    addMutation.mutate(data);\n  };\n\n  const completedItems = (shoppingItems as any[]).filter((item: any) => item.isCompleted);\n  const pendingItems = (shoppingItems as any[]).filter((item: any) => !item.isCompleted);\n  \n  // Process and group shopping items by category\n  const groupedItems = useMemo(() => {\n    if (viewMode !== 'grouped') return {};\n    \n    const processed = pendingItems.map(item => {\n      const name = language === 'ar' ? item.itemNameAr : item.itemNameEn;\n      return {\n        ...item,\n        displayName: name || item.itemNameEn || item.itemNameAr,\n        amount: parseFloat(item.quantity) || 1,\n        unit: item.unit || 'piece',\n        category: item.category || 'other'\n      };\n    });\n    \n    const categoryGroups: Record<string, any[]> = {};\n    \n    for (const item of processed) {\n      if (!categoryGroups[item.category]) {\n        categoryGroups[item.category] = [];\n      }\n      categoryGroups[item.category].push(item);\n    }\n    \n    // Sort each category\n    for (const category in categoryGroups) {\n      categoryGroups[category].sort((a, b) => a.displayName.localeCompare(b.displayName));\n    }\n    \n    return categoryGroups;\n  }, [pendingItems, viewMode, language]);\n\n  const categoryTranslations: Record<string, { en: string; ar: string }> = {\n    vegetables: { en: 'Vegetables', ar: 'خضار' },\n    meat: { en: 'Meat & Poultry', ar: 'لحوم ودواجن' },\n    dairy: { en: 'Dairy', ar: 'منتجات ألبان' },\n    grains: { en: 'Grains & Starches', ar: 'حبوب ونشويات' },\n    spices: { en: 'Spices & Herbs', ar: 'بهارات وأعشاب' },\n    oils: { en: 'Oils & Liquids', ar: 'زيوت وسوائل' },\n    other: { en: 'Other', ar: 'أخرى' }\n  };\n\n  const getCategoryName = (category: string) => {\n    const translation = categoryTranslations[category];\n    return translation ? (language === 'ar' ? translation.ar : translation.en) : category;\n  };\n\n  return (\n    <div className={`h-full bg-gray-50 dark:bg-gray-900 ${isRtl ? 'rtl' : 'ltr'} flex flex-col overflow-hidden`}>\n      <Header />\n      \n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <ShoppingCart className=\"h-8 w-8 text-blue-600\" />\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              {t('shoppingList')}\n            </h1>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Button\n              onClick={() => setViewMode(viewMode === 'grouped' ? 'list' : 'grouped')}\n              variant=\"outline\"\n              data-testid=\"toggle-view-button\"\n            >\n              {viewMode === 'grouped' ? t('listView') : t('groupedView')}\n            </Button>\n            \n            {completedItems.length > 0 && (\n              <Button\n                onClick={() => clearCompletedMutation.mutate()}\n                variant=\"outline\"\n                disabled={clearCompletedMutation.isPending}\n                data-testid=\"clear-completed-button\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                {t('clearCompleted')}\n              </Button>\n            )}\n            \n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"add-shopping-item-button\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {t('addShoppingItem')}\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>{t('addShoppingItem')}</DialogTitle>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"itemNameEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('itemNameEn')}</FormLabel>\n                          <FormControl>\n                            <Input {...field} data-testid=\"item-name-en-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"itemNameAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('itemNameAr')}</FormLabel>\n                          <FormControl>\n                            <Input {...field} className=\"text-right\" data-testid=\"item-name-ar-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <FormField\n                        control={form.control}\n                        name=\"quantity\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t('quantity')}</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"quantity-input\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"unit\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>{t('unit')}</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"unit-select\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"kg\">{t('kg')}</SelectItem>\n                                <SelectItem value=\"gram\">{t('gram')}</SelectItem>\n                                <SelectItem value=\"liter\">{t('liter')}</SelectItem>\n                                <SelectItem value=\"cup\">{t('cup')}</SelectItem>\n                                <SelectItem value=\"piece\">{t('piece')}</SelectItem>\n                                <SelectItem value=\"tablespoon\">{t('tablespoon')}</SelectItem>\n                                <SelectItem value=\"teaspoon\">{t('teaspoon')}</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('category')}</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"category-select\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"vegetables\">{t('vegetables')}</SelectItem>\n                              <SelectItem value=\"fruits\">{t('fruits')}</SelectItem>\n                              <SelectItem value=\"meat\">{t('meat')}</SelectItem>\n                              <SelectItem value=\"dairy\">{t('dairy')}</SelectItem>\n                              <SelectItem value=\"grains\">{t('grains')}</SelectItem>\n                              <SelectItem value=\"spices\">{t('spices')}</SelectItem>\n                              <SelectItem value=\"beverages\">{t('beverages')}</SelectItem>\n                              <SelectItem value=\"other\">{t('other')}</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>{t('notes')}</FormLabel>\n                          <FormControl>\n                            <Textarea {...field} rows={2} data-testid=\"notes-input\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex justify-end gap-2\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                        {t('cancel')}\n                      </Button>\n                      <Button type=\"submit\" disabled={addMutation.isPending} data-testid=\"save-item-button\">\n                        {t('save')}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"text-gray-500\">{t('loading')}...</div>\n          </div>\n        ) : (shoppingItems as any[]).length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12\">\n              <div className=\"text-center text-gray-500\">\n                <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg\">{t('shoppingListEmpty')}</p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Grouped View */}\n            {viewMode === 'grouped' && Object.keys(groupedItems).length > 0 ? (\n              Object.entries(groupedItems).map(([category, items]) => (\n                <Card key={category}>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <ShoppingCart className=\"h-5 w-5\" />\n                      {getCategoryName(category)} ({items.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {items.map((item: any) => (\n                        <div\n                          key={item.id}\n                          className=\"flex items-center gap-3 p-3 rounded-lg border bg-white dark:bg-gray-800\"\n                          data-testid={`shopping-item-${item.id}`}\n                        >\n                          <Checkbox\n                            checked={item.isCompleted}\n                            onCheckedChange={() => toggleMutation.mutate(item.id)}\n                            data-testid={`toggle-item-${item.id}`}\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">\n                              {item.displayName}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {item.quantity && `${item.quantity}`}\n                            </div>\n                            {item.notes && (\n                              <div className=\"text-xs text-gray-400 mt-1\">{item.notes}</div>\n                            )}\n                          </div>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => markAsBoughtMutation.mutate(item.id)}\n                              disabled={markAsBoughtMutation.isPending}\n                              className={`text-green-600 hover:text-green-700 transition-all duration-300 ${markAsBoughtMutation.isPending ? 'bg-green-100 scale-110' : ''}`}\n                              data-testid={`buy-item-${item.id}`}\n                              title=\"Mark as bought and move to pantry\"\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteMutation.mutate(item.id)}\n                              disabled={deleteMutation.isPending}\n                              data-testid={`delete-item-${item.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              /* List View - Pending Items */\n              pendingItems.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <ShoppingCart className=\"h-5 w-5\" />\n                      {t('pending')} ({pendingItems.length})\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {pendingItems.map((item: any) => (\n                        <div\n                          key={item.id}\n                          className=\"flex items-center gap-3 p-3 rounded-lg border bg-white dark:bg-gray-800\"\n                          data-testid={`shopping-item-${item.id}`}\n                        >\n                          <Checkbox\n                            checked={item.isCompleted}\n                            onCheckedChange={() => toggleMutation.mutate(item.id)}\n                            data-testid={`toggle-item-${item.id}`}\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">\n                              {language === 'ar' ? item.itemNameAr || item.itemNameEn : item.itemNameEn || item.itemNameAr}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {item.quantity && item.unit && `${item.quantity} ${t(item.unit)}`}\n                              {item.category && ` • ${t(item.category)}`}\n                            </div>\n                            {item.notes && (\n                              <div className=\"text-xs text-gray-400 mt-1\">{item.notes}</div>\n                            )}\n                          </div>\n                          <div className=\"flex gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => markAsBoughtMutation.mutate(item.id)}\n                              disabled={markAsBoughtMutation.isPending}\n                              className={`text-green-600 hover:text-green-700 transition-all duration-300 ${markAsBoughtMutation.isPending ? 'bg-green-100 scale-110' : ''}`}\n                              data-testid={`buy-item-${item.id}`}\n                              title=\"Mark as bought and move to pantry\"\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteMutation.mutate(item.id)}\n                              disabled={deleteMutation.isPending}\n                              data-testid={`delete-item-${item.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            )}\n\n            {/* Completed Items */}\n            {completedItems.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Check className=\"h-5 w-5 text-green-500\" />\n                    {t('completed')} ({completedItems.length})\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {completedItems.map((item: any) => (\n                      <div\n                        key={item.id}\n                        className=\"flex items-center gap-3 p-3 rounded-lg border bg-gray-50 dark:bg-gray-700 opacity-75\"\n                        data-testid={`completed-item-${item.id}`}\n                      >\n                        <Checkbox\n                          checked={item.isCompleted}\n                          onCheckedChange={() => toggleMutation.mutate(item.id)}\n                          data-testid={`toggle-completed-${item.id}`}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium line-through text-gray-500\">\n                            {language === 'ar' ? item.itemNameAr || item.itemNameEn : item.itemNameEn || item.itemNameAr}\n                          </div>\n                          <div className=\"text-sm text-gray-400\">\n                            {item.quantity && item.unit && `${item.quantity} ${t(item.unit)}`}\n                            {item.category && ` • ${t(item.category)}`}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(item.id)}\n                          disabled={deleteMutation.isPending}\n                          data-testid={`delete-completed-${item.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24042},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 active:scale-95 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1939},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed bottom-4 right-4 z-[100] flex max-h-screen w-full flex-col md:max-w-[350px] pointer-events-none\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-lg border p-3 pr-6 shadow-md bg-background/95 backdrop-blur transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4804},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ImageUpload.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Upload, X, Image as ImageIcon } from 'lucide-react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface ImageUploadProps {\n  images: string[];\n  onImagesChange: (images: string[]) => void;\n  maxImages?: number;\n}\n\nexport function ImageUpload({ images, onImagesChange, maxImages = 5 }: ImageUploadProps) {\n  const { t } = useLanguage();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploading, setUploading] = useState(false);\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (files.length === 0) return;\n\n    if (images.length + files.length > maxImages) {\n      return;\n    }\n\n    setUploading(true);\n    const newImageUrls: string[] = [];\n\n    try {\n      for (const file of files) {\n        // Validate file type\n        if (!file.type.startsWith('image/')) {\n          continue;\n        }\n\n        // Validate file size (max 5MB)\n        if (file.size > 5 * 1024 * 1024) {\n          continue;\n        }\n\n        // Convert to base64 data URL for now (in a real app, you'd upload to a server)\n        const dataUrl = await fileToDataUrl(file);\n        newImageUrls.push(dataUrl);\n      }\n\n      onImagesChange([...images, ...newImageUrls]);\n      \n      if (newImageUrls.length > 0) {\n      }\n    } catch (error) {\n    } finally {\n      setUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const fileToDataUrl = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeImage = (index: number) => {\n    const newImages = images.filter((_, i) => i !== index);\n    onImagesChange(newImages);\n  };\n\n  const triggerFileSelect = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <label className=\"text-sm font-medium\">{t('recipeImagesUpload')}</label>\n        <span className=\"text-xs text-muted-foreground\">\n          {images.length}/{maxImages} {t('images')}\n        </span>\n      </div>\n\n      {/* Image Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        {images.map((image, index) => (\n          <Card key={index} className=\"relative group overflow-hidden\">\n            <CardContent className=\"p-0\">\n              <img\n                src={image}\n                alt={`Recipe image ${index + 1}`}\n                className=\"w-full h-32 object-cover\"\n              />\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                onClick={() => removeImage(index)}\n                data-testid={`remove-image-${index}`}\n              >\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n\n        {/* Upload Button */}\n        {images.length < maxImages && (\n          <Card \n            className=\"border-2 border-dashed border-border hover:border-primary transition-colors cursor-pointer\"\n            onClick={triggerFileSelect}\n          >\n            <CardContent className=\"flex flex-col items-center justify-center h-32 text-muted-foreground hover:text-primary transition-colors\">\n              {uploading ? (\n                <div className=\"animate-spin\">\n                  <Upload className=\"w-6 h-6\" />\n                </div>\n              ) : (\n                <>\n                  <ImageIcon className=\"w-6 h-6 mb-2\" />\n                  <span className=\"text-xs text-center\">{t('addImage')}</span>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Hidden File Input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        multiple\n        onChange={handleFileSelect}\n        className=\"hidden\"\n        data-testid=\"image-upload-input\"\n      />\n\n      {/* Upload Info */}\n      <p className=\"text-xs text-muted-foreground\">\n        {t('imageUploadInfo')}\n      </p>\n    </div>\n  );\n}","size_bytes":4542},"client/src/components/ShareButton.tsx":{"content":"import { useState } from 'react';\nimport { Share, Copy, Check } from 'lucide-react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from '@/components/ui/button';\nimport { Recipe } from '@shared/schema';\n\ninterface ShareButtonProps {\n  recipe: Recipe;\n  variant?: 'default' | 'outline' | 'ghost';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n}\n\nexport function ShareButton({ recipe, variant = 'outline', size = 'icon' }: ShareButtonProps) {\n  const { t, language } = useLanguage();\n  const [copied, setCopied] = useState(false);\n\n  const recipeName = language === 'ar' ? recipe.nameAr : recipe.nameEn;\n  const recipeDescription = language === 'ar' ? recipe.descriptionAr : recipe.descriptionEn;\n\n  const shareData = {\n    title: `${recipeName} - ${t('appName')}`,\n    text: recipeDescription || `${t('checkOutThisRecipe')}: ${recipeName}`,\n    url: `${window.location.origin}/recipe/${recipe.id}`,\n  };\n\n  const handleShare = async () => {\n    try {\n      // Try Web Share API first (mobile devices)\n      if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {\n        await navigator.share(shareData);\n      } else {\n        // Fallback to clipboard\n        const shareText = `${shareData.title}\\n${shareData.text}\\n${shareData.url}`;\n        await navigator.clipboard.writeText(shareText);\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n        \n\n      }\n    } catch (error) {\n      // Final fallback - try copying just the URL\n      try {\n        await navigator.clipboard.writeText(shareData.url);\n        setCopied(true);\n        setTimeout(() => setCopied(false), 2000);\n        \n\n      } catch (clipboardError) {\n      }\n    }\n  };\n\n  return (\n    <Button\n      variant={variant}\n      size={size}\n      onClick={handleShare}\n      data-testid={`share-recipe-${recipe.id}`}\n    >\n      {copied ? (\n        <Check className=\"w-4 h-4 text-green-500\" />\n      ) : (\n        <Share className=\"w-4 h-4 text-muted-foreground\" />\n      )}\n      {size !== 'icon' && <span className=\"ml-2\">{t('share')}</span>}\n    </Button>\n  );\n}","size_bytes":2107},"client/src/components/StarRating.tsx":{"content":"import { useState } from 'react';\nimport { Star } from 'lucide-react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Recipe } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\n\ninterface StarRatingProps {\n  recipe: Recipe;\n  onRatingUpdate?: (newRating: number) => void;\n  interactive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function StarRating({ recipe, onRatingUpdate, interactive = false, size = 'md' }: StarRatingProps) {\n  const { t } = useLanguage();\n  const [rating, setRating] = useState(recipe.rating || 0);\n  const [hoveredRating, setHoveredRating] = useState<number | null>(null);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  };\n\n  const handleRatingClick = async (newRating: number) => {\n    if (!interactive || isUpdating) return;\n\n    setIsUpdating(true);\n    try {\n      await apiRequest('PATCH', `/api/recipes/${recipe.id}`, {\n        rating: newRating\n      });\n      \n      setRating(newRating);\n      if (onRatingUpdate) {\n        onRatingUpdate(newRating);\n      }\n      \n    } catch (error) {\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const displayRating = hoveredRating !== null ? hoveredRating : rating;\n\n  return (\n    <div className=\"flex items-center gap-1\">\n      {Array.from({ length: 5 }, (_, i) => {\n        const starValue = i + 1;\n        return (\n          <Button\n            key={i}\n            variant=\"ghost\"\n            size=\"sm\"\n            className={`p-0 h-auto ${interactive ? 'cursor-pointer hover:scale-110' : 'cursor-default'} transition-transform`}\n            onClick={() => handleRatingClick(starValue)}\n            onMouseEnter={() => interactive && setHoveredRating(starValue)}\n            onMouseLeave={() => interactive && setHoveredRating(null)}\n            disabled={isUpdating}\n            data-testid={`star-rating-${starValue}`}\n          >\n            <Star\n              className={`${sizeClasses[size]} transition-colors ${\n                starValue <= displayRating \n                  ? 'text-yellow-400 fill-yellow-400' \n                  : 'text-gray-300'\n              } ${interactive && hoveredRating !== null && starValue <= hoveredRating ? 'text-yellow-500 fill-yellow-500' : ''}`}\n            />\n          </Button>\n        );\n      })}\n      <span className=\"ml-2 text-sm font-medium\" data-testid=\"rating-value\">\n        {rating}\n      </span>\n    </div>\n  );\n}","size_bytes":2540},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"client/src/components/EmailSync.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Users, Mail, Copy, UserPlus, Settings } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface FamilyGroup {\n  id: string;\n  name: string;\n  ownerEmail: string;\n  inviteCode: string;\n  memberCount?: number;\n}\n\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  familyGroupId?: string;\n}\n\nexport function EmailSync() {\n  const { t } = useLanguage();\n  const [user, setUser] = useState<User | null>(null);\n  const [familyGroup, setFamilyGroup] = useState<FamilyGroup | null>(null);\n  const [familyMembers, setFamilyMembers] = useState<User[]>([]);\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [groupName, setGroupName] = useState('');\n  const [inviteCode, setInviteCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSetupModalOpen, setIsSetupModalOpen] = useState(false);\n\n  useEffect(() => {\n    checkUserStatus();\n    // Create demo family for testing if no user exists\n    createDemoFamily();\n  }, []);\n  \n  const createDemoFamily = () => {\n    // Only create demo if no user exists\n    if (!localStorage.getItem('userEmail')) {\n      setTimeout(() => {\n        setFamilyGroup({\n          id: 'demo-family',\n          name: 'عائلة النمر',\n          ownerEmail: 'demo@example.com',\n          inviteCode: 'DEMO123',\n          memberCount: 3\n        });\n      }, 1000);\n    }\n  };\n\n  const checkUserStatus = async () => {\n    try {\n      // Try to get current user from localStorage first\n      const savedEmail = localStorage.getItem('userEmail');\n      if (savedEmail) {\n        const response = await apiRequest('GET', `/api/users/email/${savedEmail}`);\n        const userData = await response.json();\n        setUser(userData);\n        setEmail(savedEmail);\n        setName(userData.name || '');\n        \n        if (userData.familyGroupId) {\n          await loadFamilyGroup(userData.familyGroupId);\n        }\n      }\n    } catch (error) {\n      // User doesn't exist yet, will need to create\n    }\n  };\n\n  const loadFamilyGroup = async (familyGroupId: string) => {\n    try {\n      const [groupResponse, membersResponse] = await Promise.all([\n        apiRequest('GET', `/api/family-groups/${familyGroupId}`),\n        apiRequest('GET', `/api/family-groups/${familyGroupId}/members`)\n      ]);\n      \n      const groupData = await groupResponse.json();\n      const membersData = await membersResponse.json();\n      \n      setFamilyGroup({ ...groupData, memberCount: membersData.length });\n      setFamilyMembers(membersData);\n    } catch (error) {\n      console.error('Error loading family group:', error);\n    }\n  };\n\n  const createUser = async () => {\n    if (!email || !name) {\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/users', { email, name });\n      const userData = await response.json();\n      setUser(userData);\n      localStorage.setItem('userEmail', email);\n      \n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createFamilyGroup = async () => {\n    if (!groupName || !user) return;\n\n    setIsLoading(true);\n    try {\n      const groupResponse = await apiRequest('POST', '/api/family-groups', {\n        name: groupName,\n        ownerEmail: user.email\n      });\n      const group = await groupResponse.json();\n      \n      // Join the created group\n      await apiRequest('POST', `/api/family-groups/${group.id}/join`, {\n        userId: user.id\n      });\n      \n      await loadFamilyGroup(group.id);\n      setIsSetupModalOpen(false);\n      \n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const joinFamilyGroup = async () => {\n    if (!inviteCode || !user) return;\n\n    setIsLoading(true);\n    try {\n      const groupResponse = await apiRequest('GET', `/api/family-groups/invite/${inviteCode}`);\n      const group = await groupResponse.json();\n      \n      await apiRequest('POST', `/api/family-groups/${group.id}/join`, {\n        userId: user.id\n      });\n      \n      await loadFamilyGroup(group.id);\n      setIsSetupModalOpen(false);\n      \n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const copyInviteCode = () => {\n    if (familyGroup?.inviteCode) {\n      navigator.clipboard.writeText(familyGroup.inviteCode);\n    }\n  };\n\n  if (!user) {\n    return (\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Mail className=\"h-5 w-5\" />\n            {t('setupEmailSync')}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            {t('emailSyncDescription')}\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Input\n              type=\"email\"\n              placeholder={t('yourEmail')}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              data-testid=\"email-input\"\n            />\n            <Input\n              placeholder={t('yourName')}\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              data-testid=\"name-input\"\n            />\n          </div>\n          \n          <Button\n            onClick={createUser}\n            disabled={isLoading || !email || !name}\n            className=\"w-full\"\n            data-testid=\"create-user-button\"\n          >\n            {isLoading ? t('loading') : t('setupAccount')}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          {t('familySync')}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"font-medium\">{user.name || user.email}</p>\n            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n          </div>\n          <Badge variant={familyGroup ? \"default\" : \"secondary\"}>\n            {familyGroup ? t('connected') : t('notConnected')}\n          </Badge>\n        </div>\n\n        {familyGroup ? (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n              <div>\n                <p className=\"font-medium\">{familyGroup.name}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  {familyGroup.memberCount} {t('members')}\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={copyInviteCode}\n                data-testid=\"copy-invite-code\"\n              >\n                <Copy className=\"h-4 w-4 mr-1\" />\n                {familyGroup.inviteCode}\n              </Button>\n            </div>\n            \n            <div className=\"text-xs text-muted-foreground\">\n              <p>{t('familyMembers')}:</p>\n              <div className=\"flex flex-wrap gap-1 mt-1\">\n                {familyMembers.map((member) => (\n                  <Badge key={member.id} variant=\"outline\" className=\"text-xs\">\n                    {member.name || member.email}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Dialog open={isSetupModalOpen} onOpenChange={setIsSetupModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"w-full\" data-testid=\"setup-family-sync\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                {t('setupFamilySync')}\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>{t('setupFamilySync')}</DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">{t('createNewFamily')}</h4>\n                  <Input\n                    placeholder={t('familyGroupName')}\n                    value={groupName}\n                    onChange={(e) => setGroupName(e.target.value)}\n                    data-testid=\"group-name-input\"\n                  />\n                  <Button\n                    onClick={createFamilyGroup}\n                    disabled={isLoading || !groupName}\n                    className=\"w-full\"\n                    data-testid=\"create-family-group\"\n                  >\n                    {t('createFamily')}\n                  </Button>\n                </div>\n                \n                <div className=\"text-center text-muted-foreground\">\n                  {t('or')}\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">{t('joinExistingFamily')}</h4>\n                  <Input\n                    placeholder={t('inviteCode')}\n                    value={inviteCode}\n                    onChange={(e) => setInviteCode(e.target.value.toUpperCase())}\n                    data-testid=\"invite-code-input\"\n                  />\n                  <Button\n                    onClick={joinFamilyGroup}\n                    disabled={isLoading || !inviteCode}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"join-family-group\"\n                  >\n                    <UserPlus className=\"h-4 w-4 mr-2\" />\n                    {t('joinFamily')}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10239},"client/src/hooks/useUser.ts":{"content":"import { useState, useEffect } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  name?: string;\n  familyGroupId?: string;\n}\n\ninterface FamilyGroup {\n  id: string;\n  name: string;\n  ownerEmail: string;\n  inviteCode: string;\n}\n\n// Function to update manifest dynamically\nfunction updateManifestWithFamilyName(appName: string) {\n  // Create a new manifest object\n  const manifest = {\n    \"name\": appName,\n    \"short_name\": appName,\n    \"description\": \"Family recipe management app with real-time sync and shared shopping lists\",\n    \"start_url\": \"/\",\n    \"display\": \"standalone\",\n    \"background_color\": \"#ffffff\",\n    \"theme_color\": \"#2563eb\",\n    \"orientation\": \"portrait\",\n    \"scope\": \"/\",\n    \"lang\": \"ar\",\n    \"dir\": \"rtl\",\n    \"categories\": [\"food\", \"lifestyle\", \"productivity\"],\n    \"icons\": [\n      {\n        \"src\": \"/icon-192.png\",\n        \"sizes\": \"192x192\",\n        \"type\": \"image/png\",\n        \"purpose\": \"any maskable\"\n      },\n      {\n        \"src\": \"/icon-512.png\", \n        \"sizes\": \"512x512\",\n        \"type\": \"image/png\",\n        \"purpose\": \"any maskable\"\n      }\n    ],\n    \"features\": [\n      \"Real-time sync\",\n      \"Offline support\", \n      \"Multi-language\",\n      \"Recipe management\",\n      \"Shopping lists\",\n      \"Pantry management\"\n    ],\n    \"prefer_related_applications\": false\n  };\n  \n  // Convert to blob and create URL\n  const manifestBlob = new Blob([JSON.stringify(manifest)], { type: 'application/json' });\n  const manifestURL = URL.createObjectURL(manifestBlob);\n  \n  // Update manifest link\n  let manifestLink = document.querySelector('link[rel=\"manifest\"]') as HTMLLinkElement;\n  if (manifestLink) {\n    manifestLink.href = manifestURL;\n  }\n}\n\nexport function useUser() {\n  const [user, setUser] = useState<User | null>(null);\n  const [familyGroup, setFamilyGroup] = useState<FamilyGroup | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  const loadUser = async () => {\n    try {\n      const savedEmail = localStorage.getItem('userEmail');\n      console.log('🔍 Saved email:', savedEmail);\n      \n      if (savedEmail) {\n        const response = await apiRequest('GET', `/api/users/email/${savedEmail}`);\n        const userData = await response.json();\n        console.log('👤 User data:', userData);\n        setUser(userData);\n        \n        if (userData.familyGroupId) {\n          const groupResponse = await apiRequest('GET', `/api/family-groups/${userData.familyGroupId}`);\n          const groupData = await groupResponse.json();\n          console.log('👨‍👩‍👧‍👦 Family group data:', groupData);\n          setFamilyGroup(groupData);\n          \n          // Update PWA title dynamically based on family name\n          const appName = `${groupData.name} Nesting`;\n          console.log('📱 Setting app name to:', appName);\n          document.title = appName;\n          \n          // Update PWA meta tags\n          const appleTitle = document.querySelector('meta[name=\"apple-mobile-web-app-title\"]');\n          if (appleTitle) {\n            appleTitle.setAttribute('content', appName);\n          }\n          \n          // Update manifest link to use dynamic manifest\n          updateManifestWithFamilyName(appName);\n        } else {\n          // Reset to default name if no family group\n          console.log('🏠 No family group, using default name');\n          document.title = 'Family Nesting';\n          const appleTitle = document.querySelector('meta[name=\"apple-mobile-web-app-title\"]');\n          if (appleTitle) {\n            appleTitle.setAttribute('content', 'Family Nesting');\n          }\n          updateManifestWithFamilyName('Family Nesting');\n        }\n      } else {\n        console.log('❌ No saved email found');\n      }\n    } catch (error) {\n      console.error('💥 Error loading user:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    user,\n    familyGroup,\n    isLoading,\n    refreshUser: loadUser\n  };\n}","size_bytes":4047},"client/src/utils/ingredientUtils.ts":{"content":"// Utility functions for ingredient processing and unit conversion\n\ninterface Ingredient {\n  name: string;\n  amount: string;\n}\n\ninterface ProcessedIngredient {\n  name: string;\n  amount: number;\n  unit: string;\n  category: string;\n}\n\n// Category mapping for ingredients\nconst INGREDIENT_CATEGORIES: Record<string, string> = {\n  // Vegetables\n  'طماطم': 'vegetables',\n  'tomato': 'vegetables',\n  'بصل': 'vegetables', \n  'onion': 'vegetables',\n  'ثوم': 'vegetables',\n  'garlic': 'vegetables',\n  'جزر': 'vegetables',\n  'carrot': 'vegetables',\n  'بطاطس': 'vegetables',\n  'potato': 'vegetables',\n  'خيار': 'vegetables',\n  'cucumber': 'vegetables',\n  'فلفل': 'vegetables',\n  'pepper': 'vegetables',\n  'باذنجان': 'vegetables',\n  'eggplant': 'vegetables',\n  \n  // Meats\n  'لحم': 'meat',\n  'meat': 'meat',\n  'دجاج': 'meat',\n  'chicken': 'meat',\n  'سمك': 'meat',\n  'fish': 'meat',\n  'لحم بقر': 'meat',\n  'beef': 'meat',\n  'لحم خروف': 'meat',\n  'lamb': 'meat',\n  \n  // Dairy\n  'حليب': 'dairy',\n  'milk': 'dairy',\n  'جبن': 'dairy',\n  'cheese': 'dairy',\n  'زبدة': 'dairy',\n  'butter': 'dairy',\n  'كريمة': 'dairy',\n  'cream': 'dairy',\n  'زبادي': 'dairy',\n  'yogurt': 'dairy',\n  'بيض': 'dairy',\n  'egg': 'dairy',\n  \n  // Grains & Starches\n  'دقيق': 'grains',\n  'flour': 'grains',\n  'أرز': 'grains',\n  'rice': 'grains',\n  'خبز': 'grains',\n  'bread': 'grains',\n  'شعيرية': 'grains',\n  'pasta': 'grains',\n  'برغل': 'grains',\n  'bulgur': 'grains',\n  \n  // Spices & Herbs\n  'ملح': 'spices',\n  'salt': 'spices',\n  'فلفل أسود': 'spices',\n  'black pepper': 'spices',\n  'كمون': 'spices',\n  'cumin': 'spices',\n  'كزبرة': 'spices',\n  'coriander': 'spices',\n  'قرفة': 'spices',\n  'cinnamon': 'spices',\n  'هيل': 'spices',\n  'cardamom': 'spices',\n  'بقدونس': 'spices',\n  'parsley': 'spices',\n  'نعناع': 'spices',\n  'mint': 'spices',\n  \n  // Oils & Liquids\n  'زيت': 'oils',\n  'oil': 'oils',\n  'ماء': 'oils',\n  'water': 'oils',\n  'خل': 'oils',\n  'vinegar': 'oils',\n  'عصير ليمون': 'oils',\n  'lemon juice': 'oils',\n  \n  // Other\n  'سكر': 'other',\n  'sugar': 'other',\n  'عسل': 'other',\n  'honey': 'other',\n  'ملعقة صغيرة': 'other',\n  'teaspoon': 'other',\n  'ملعقة كبيرة': 'other',\n  'tablespoon': 'other',\n};\n\n// Unit conversion constants\nconst UNIT_CONVERSIONS: Record<string, { to: string; factor: number }[]> = {\n  'gram': [\n    { to: 'kg', factor: 1000 },\n    { to: 'كيلو', factor: 1000 },\n    { to: 'كيلوجرام', factor: 1000 }\n  ],\n  'جرام': [\n    { to: 'kg', factor: 1000 },\n    { to: 'كيلو', factor: 1000 },\n    { to: 'كيلوجرام', factor: 1000 }\n  ],\n  'ml': [\n    { to: 'liter', factor: 1000 },\n    { to: 'لتر', factor: 1000 }\n  ],\n  'مل': [\n    { to: 'liter', factor: 1000 },\n    { to: 'لتر', factor: 1000 }\n  ],\n  'cup': [\n    { to: 'cups', factor: 1 }\n  ],\n  'كوب': [\n    { to: 'أكواب', factor: 1 }\n  ]\n};\n\n// Normalize unit names\nconst UNIT_ALIASES: Record<string, string> = {\n  'g': 'gram',\n  'grams': 'gram',\n  'جرام': 'gram',\n  'جم': 'gram',\n  'kg': 'kg',\n  'كيلو': 'kg',\n  'كيلوجرام': 'kg',\n  'كيلوغرام': 'kg',\n  'ml': 'ml',\n  'مل': 'ml',\n  'milliliter': 'ml',\n  'liter': 'liter',\n  'لتر': 'liter',\n  'l': 'liter',\n  'cup': 'cup',\n  'cups': 'cup',\n  'كوب': 'cup',\n  'أكواب': 'cup',\n  'tbsp': 'tablespoon',\n  'tablespoon': 'tablespoon',\n  'ملعقة كبيرة': 'tablespoon',\n  'م ك': 'tablespoon',\n  'tsp': 'teaspoon',\n  'teaspoon': 'teaspoon',\n  'ملعقة صغيرة': 'teaspoon',\n  'م ص': 'teaspoon',\n  'piece': 'piece',\n  'pieces': 'piece',\n  'قطعة': 'piece',\n  'قطع': 'piece',\n  'حبة': 'piece',\n  'حبات': 'piece'\n};\n\nexport function parseAmount(amountStr: string): { amount: number; unit: string } {\n  const trimmed = amountStr.trim();\n  \n  // Extract number and unit using regex\n  const match = trimmed.match(/^(\\d*\\.?\\d+)\\s*(.*)$/);\n  \n  if (!match) {\n    return { amount: 1, unit: 'piece' };\n  }\n  \n  const amount = parseFloat(match[1]) || 1;\n  const unit = match[2]?.trim() || 'piece';\n  \n  // Normalize unit\n  const normalizedUnit = UNIT_ALIASES[unit.toLowerCase()] || unit;\n  \n  return { amount, unit: normalizedUnit };\n}\n\nexport function getIngredientCategory(ingredientName: string): string {\n  const name = ingredientName.toLowerCase().trim();\n  \n  // Check for exact matches first\n  if (INGREDIENT_CATEGORIES[name]) {\n    return INGREDIENT_CATEGORIES[name];\n  }\n  \n  // Check for partial matches\n  for (const [key, category] of Object.entries(INGREDIENT_CATEGORIES)) {\n    if (name.includes(key.toLowerCase()) || key.toLowerCase().includes(name)) {\n      return category;\n    }\n  }\n  \n  return 'other';\n}\n\nexport function convertUnit(amount: number, fromUnit: string, targetUnit?: string): { amount: number; unit: string } {\n  const normalizedFromUnit = UNIT_ALIASES[fromUnit.toLowerCase()] || fromUnit;\n  \n  if (!targetUnit) {\n    // Auto-convert to larger units if amount is large\n    const conversions = UNIT_CONVERSIONS[normalizedFromUnit];\n    if (conversions) {\n      for (const conversion of conversions) {\n        if (amount >= conversion.factor) {\n          return {\n            amount: Math.round((amount / conversion.factor) * 100) / 100,\n            unit: conversion.to\n          };\n        }\n      }\n    }\n  }\n  \n  return { amount, unit: normalizedFromUnit };\n}\n\nexport function processIngredients(ingredients: Ingredient[]): ProcessedIngredient[] {\n  const processed: ProcessedIngredient[] = [];\n  \n  for (const ingredient of ingredients) {\n    if (!ingredient.name?.trim() || !ingredient.amount?.trim()) continue;\n    \n    const { amount, unit } = parseAmount(ingredient.amount);\n    const converted = convertUnit(amount, unit);\n    const category = getIngredientCategory(ingredient.name);\n    \n    processed.push({\n      name: ingredient.name.trim(),\n      amount: converted.amount,\n      unit: converted.unit,\n      category\n    });\n  }\n  \n  return processed;\n}\n\nexport function combineIngredients(ingredientsList: ProcessedIngredient[][]): ProcessedIngredient[] {\n  const combined: Map<string, ProcessedIngredient> = new Map();\n  \n  for (const ingredients of ingredientsList) {\n    for (const ingredient of ingredients) {\n      const key = `${ingredient.name.toLowerCase()}_${ingredient.unit}`;\n      \n      if (combined.has(key)) {\n        const existing = combined.get(key)!;\n        existing.amount += ingredient.amount;\n        \n        // Convert to larger unit if needed\n        const converted = convertUnit(existing.amount, existing.unit);\n        existing.amount = converted.amount;\n        existing.unit = converted.unit;\n      } else {\n        combined.set(key, { ...ingredient });\n      }\n    }\n  }\n  \n  return Array.from(combined.values());\n}\n\nexport function groupIngredientsByCategory(ingredients: ProcessedIngredient[]): Record<string, ProcessedIngredient[]> {\n  const grouped: Record<string, ProcessedIngredient[]> = {};\n  \n  for (const ingredient of ingredients) {\n    if (!grouped[ingredient.category]) {\n      grouped[ingredient.category] = [];\n    }\n    grouped[ingredient.category].push(ingredient);\n  }\n  \n  // Sort each category\n  for (const category in grouped) {\n    grouped[category].sort((a, b) => a.name.localeCompare(b.name));\n  }\n  \n  return grouped;\n}\n\nexport function formatAmount(amount: number, unit: string): string {\n  // Round to 2 decimal places and remove trailing zeros\n  const rounded = Math.round(amount * 100) / 100;\n  const formatted = rounded.toString();\n  \n  return `${formatted} ${unit}`;\n}","size_bytes":7637},"client/src/lib/feedback.ts":{"content":"// Haptic feedback utilities for better user experience\n\nexport function vibrateOnSuccess() {\n  if ('vibrate' in navigator) {\n    navigator.vibrate([50, 30, 50]); // Short success pattern\n  }\n}\n\nexport function vibrateOnError() {\n  if ('vibrate' in navigator) {\n    navigator.vibrate([100, 50, 100, 50, 100]); // Error pattern\n  }\n}\n\nexport function vibrateOnAction() {\n  if ('vibrate' in navigator) {\n    navigator.vibrate(30); // Quick tap feedback\n  }\n}\n\n// Visual feedback for buttons\nexport function animateButtonSuccess(button: HTMLElement) {\n  button.style.transform = 'scale(0.95)';\n  button.style.backgroundColor = 'rgb(34, 197, 94)'; // green-500\n  button.style.transition = 'all 0.15s ease';\n  \n  setTimeout(() => {\n    button.style.transform = '';\n    button.style.backgroundColor = '';\n  }, 150);\n}\n\nexport function animateButtonError(button: HTMLElement) {\n  button.style.transform = 'scale(0.95)';\n  button.style.backgroundColor = 'rgb(239, 68, 68)'; // red-500\n  button.style.transition = 'all 0.15s ease';\n  \n  setTimeout(() => {\n    button.style.transform = '';\n    button.style.backgroundColor = '';\n  }, 150);\n}\n\n// Combined feedback function\nexport function provideFeedback(type: 'success' | 'error' | 'action', element?: HTMLElement) {\n  // Visual feedback\n  if (element) {\n    if (type === 'success') {\n      animateButtonSuccess(element);\n    } else if (type === 'error') {\n      animateButtonError(element);\n    }\n  }\n  \n  // Haptic feedback\n  if (type === 'success') {\n    vibrateOnSuccess();\n  } else if (type === 'error') {\n    vibrateOnError();\n  } else if (type === 'action') {\n    vibrateOnAction();\n  }\n}\n\n// Custom hook for minimal feedback instead of toasts\nexport function useMinimalFeedback() {\n  return {\n    success: (element?: HTMLElement) => provideFeedback('success', element),\n    error: (element?: HTMLElement) => provideFeedback('error', element),\n    action: (element?: HTMLElement) => provideFeedback('action', element)\n  };\n}","size_bytes":1972},"client/src/components/MultiRecipeSelector.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Recipe } from '@shared/schema';\nimport { ExternalLink, ShoppingCart, Wrench } from 'lucide-react';\n\ninterface MultiRecipeSelectorProps {\n  recipe: Recipe;\n  isOpen: boolean;\n  onClose: () => void;\n  onAddToShoppingList: (selectedLinks: number[]) => void;\n}\n\nexport function MultiRecipeSelector({ recipe, isOpen, onClose, onAddToShoppingList }: MultiRecipeSelectorProps) {\n  const { t, language } = useLanguage();\n  const [selectedLinks, setSelectedLinks] = useState<number[]>([0]); // Include main recipe by default\n\n  const allRecipeVersions = [\n    {\n      id: 0,\n      title: language === 'ar' ? recipe.nameAr : recipe.nameEn,\n      titleAr: recipe.nameAr,\n      ingredients: language === 'ar' ? recipe.ingredientsAr : recipe.ingredientsEn,\n      tools: language === 'ar' ? recipe.toolsAr : recipe.toolsEn,\n      servings: recipe.servings,\n      videoUrl: recipe.videoUrl\n    },\n    ...(recipe.additionalRecipes || []).map((additionalRecipe, index) => ({\n      id: index + 1,\n      title: language === 'ar' ? additionalRecipe.nameAr : additionalRecipe.nameEn,\n      titleAr: additionalRecipe.nameAr,\n      ingredients: language === 'ar' ? additionalRecipe.ingredientsAr : additionalRecipe.ingredientsEn,\n      tools: language === 'ar' ? additionalRecipe.toolsAr : additionalRecipe.toolsEn,\n      servings: additionalRecipe.servings,\n      videoUrl: additionalRecipe.videoUrl\n    }))\n  ];\n\n  const handleSelectionChange = (linkId: number, checked: boolean) => {\n    if (checked) {\n      setSelectedLinks([...selectedLinks, linkId]);\n    } else {\n      setSelectedLinks(selectedLinks.filter(id => id !== linkId));\n    }\n  };\n\n  const handleAddSelected = () => {\n    onAddToShoppingList(selectedLinks);\n    onClose();\n  };\n\n  const totalIngredients = selectedLinks.reduce((total, linkId) => {\n    const version = allRecipeVersions.find(v => v.id === linkId);\n    return total + (version?.ingredients?.length || 0);\n  }, 0);\n\n  const totalTools = selectedLinks.reduce((total, linkId) => {\n    const version = allRecipeVersions.find(v => v.id === linkId);\n    return total + (version?.tools?.length || 0);\n  }, 0);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold\">\n            Select Recipe Versions to Add\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"bg-muted rounded-lg p-4\">\n            <h3 className=\"font-semibold mb-2\">Summary</h3>\n            <div className=\"flex gap-4 text-sm\">\n              <div className=\"flex items-center gap-1\">\n                <ShoppingCart className=\"w-4 h-4\" />\n                <span>{totalIngredients} ingredients</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Wrench className=\"w-4 h-4\" />\n                <span>{totalTools} tools</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid gap-4\">\n            {allRecipeVersions.map((version) => (\n              <Card key={version.id} className={`transition-all ${selectedLinks.includes(version.id) ? 'ring-2 ring-primary' : ''}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Checkbox\n                        checked={selectedLinks.includes(version.id)}\n                        onCheckedChange={(checked) => handleSelectionChange(version.id, !!checked)}\n                      />\n                      <CardTitle className=\"text-lg\">\n                        {language === 'ar' ? version.titleAr : version.title}\n                      </CardTitle>\n                      {version.id === 0 && (\n                        <Badge variant=\"secondary\">Main</Badge>\n                      )}\n                    </div>\n                    {version.videoUrl && (\n                      <a \n                        href={version.videoUrl} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:text-primary/80\"\n                        title=\"Watch video\"\n                      >\n                        <ExternalLink className=\"w-4 h-4\" />\n                      </a>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <h4 className=\"font-medium mb-2 flex items-center gap-1\">\n                        <ShoppingCart className=\"w-3 h-3\" />\n                        Ingredients ({version.ingredients?.length || 0})\n                      </h4>\n                      <div className=\"max-h-20 overflow-y-auto text-muted-foreground\">\n                        {version.ingredients?.slice(0, 3).map((ingredient, index) => (\n                          <div key={index} className=\"text-xs\">\n                            {typeof ingredient === 'string' ? ingredient : ingredient.name}\n                          </div>\n                        ))}\n                        {(version.ingredients?.length || 0) > 3 && (\n                          <div className=\"text-xs\">...and {(version.ingredients?.length || 0) - 3} more</div>\n                        )}\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium mb-2 flex items-center gap-1\">\n                        <Wrench className=\"w-3 h-3\" />\n                        Tools ({version.tools?.length || 0})\n                      </h4>\n                      <div className=\"max-h-20 overflow-y-auto text-muted-foreground\">\n                        {version.tools?.slice(0, 3).map((tool, index) => (\n                          <div key={index} className=\"text-xs\">{tool}</div>\n                        ))}\n                        {(version.tools?.length || 0) > 3 && (\n                          <div className=\"text-xs\">...and {(version.tools?.length || 0) - 3} more</div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleAddSelected}\n              disabled={selectedLinks.length === 0}\n              className=\"flex items-center gap-2\"\n            >\n              <ShoppingCart className=\"w-4 h-4\" />\n              Add {selectedLinks.length} {selectedLinks.length === 1 ? 'Version' : 'Versions'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7387},"client/src/pages/Tools.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Header } from '@/components/Header';\nimport { useUser } from '@/hooks/useUser';\nimport { Plus, Trash2, Wrench, Check } from 'lucide-react';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nconst formSchema = z.object({\n  toolNameEn: z.string().optional().default(''),\n  toolNameAr: z.string().optional().default(''),\n  category: z.string().optional().default(''),\n  notes: z.string().optional().default(''),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function Tools() {\n  const { language, t, isRtl } = useLanguage();\n  const { user } = useUser();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      toolNameEn: '',\n      toolNameAr: '',\n      category: '',\n      notes: '',\n    },\n  });\n\n  // Fetch tools list\n  const { data: toolsItems = [], isLoading } = useQuery({\n    queryKey: ['/api/tools', user?.familyGroupId],\n    queryFn: () => {\n      // In demo mode (no user), fetch items with null familyGroupId\n      const url = user?.familyGroupId \n        ? `/api/tools?familyGroupId=${user.familyGroupId}`\n        : '/api/tools?familyGroupId=';\n      return fetch(url).then(res => res.json());\n    },\n  });\n\n  const toolsArray = Array.isArray(toolsItems) ? toolsItems : [];\n\n  // Create tool mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      return apiRequest('POST', '/api/tools', {\n        ...data,\n        isAvailable: false,\n        familyGroupId: user?.familyGroupId || null,\n        createdBy: user?.id || null\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tools', user?.familyGroupId] });\n      form.reset();\n      setIsDialogOpen(false);\n    },\n    onError: () => {\n    }\n  });\n\n  // Toggle available mutation\n  const toggleMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('PATCH', `/api/tools/${id}/toggle`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tools', user?.familyGroupId] });\n    },\n  });\n\n  // Delete tool mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/tools/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tools', user?.familyGroupId] });\n    },\n  });\n\n  // Clear available tools mutation\n  const clearAvailableMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('DELETE', `/api/tools/available?familyGroupId=${user?.familyGroupId || ''}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tools', user?.familyGroupId] });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createMutation.mutate(data);\n  };\n\n  const availableTools = toolsArray.filter((item: any) => item.isAvailable);\n  const neededTools = toolsArray.filter((item: any) => !item.isAvailable);\n\n  return (\n    <div className={`h-full bg-gray-50 dark:bg-gray-900 ${isRtl ? 'rtl' : 'ltr'} flex flex-col overflow-hidden`}>\n      <Header />\n      \n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n              🔧 Tools List\n            </h1>\n            \n            <div className=\"flex gap-4\">\n              {availableTools.length > 0 && (\n                <Button \n                  onClick={() => clearAvailableMutation.mutate()}\n                  variant=\"outline\"\n                  disabled={clearAvailableMutation.isPending}\n                >\n                  Clear Available\n                </Button>\n              )}\n              \n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"add-tool\">\n                    <Plus className=\"h-4 w-4 mr-2 rtl:mr-0 rtl:ml-2\" />\n                    Add Tool\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add New Tool</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"toolNameEn\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tool Name (English)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Large pot\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"toolNameAr\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>اسم الأداة (العربية)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"قدر كبير\" className=\"text-right\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"category\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Category</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select category\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"cooking\">Cooking</SelectItem>\n                                <SelectItem value=\"baking\">Baking</SelectItem>\n                                <SelectItem value=\"preparation\">Preparation</SelectItem>\n                                <SelectItem value=\"serving\">Serving</SelectItem>\n                                <SelectItem value=\"other\">Other</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"notes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Notes</FormLabel>\n                            <FormControl>\n                              <Textarea placeholder=\"Additional notes...\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end gap-4\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createMutation.isPending}>\n                          Add Tool\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Needed Tools */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-red-600 dark:text-red-400\">\n                  <Wrench className=\"h-5 w-5\" />\n                  Needed Tools ({neededTools.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {neededTools.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">\n                    🎉 All tools are available!\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {neededTools.map((tool: any) => (\n                      <div\n                        key={tool.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Checkbox\n                            checked={false}\n                            onCheckedChange={() => toggleMutation.mutate(tool.id)}\n                            disabled={toggleMutation.isPending}\n                          />\n                          <div>\n                            <div className=\"flex items-center gap-2\">\n                              <h4 className=\"font-medium\">\n                                {language === 'ar' ? tool.toolNameAr : tool.toolNameEn}\n                              </h4>\n                              {tool.recipeCount > 0 && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  Used in {tool.recipeCount} recipe{tool.recipeCount !== 1 ? 's' : ''}\n                                </Badge>\n                              )}\n                            </div>\n                            {tool.category && (\n                              <p className=\"text-sm text-gray-500 capitalize\">{tool.category}</p>\n                            )}\n                            {tool.notes && (\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{tool.notes}</p>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(tool.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Available Tools */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\n                  <Check className=\"h-5 w-5\" />\n                  Available Tools ({availableTools.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {availableTools.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">\n                    No tools marked as available yet.\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {availableTools.map((tool: any) => (\n                      <div\n                        key={tool.id}\n                        className=\"flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <Checkbox\n                            checked={true}\n                            onCheckedChange={() => toggleMutation.mutate(tool.id)}\n                            disabled={toggleMutation.isPending}\n                          />\n                          <div>\n                            <div className=\"flex items-center gap-2\">\n                              <h4 className=\"font-medium line-through text-gray-500\">\n                                {language === 'ar' ? tool.toolNameAr : tool.toolNameEn}\n                              </h4>\n                              {tool.recipeCount > 0 && (\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  Used in {tool.recipeCount} recipe{tool.recipeCount !== 1 ? 's' : ''}\n                                </Badge>\n                              )}\n                            </div>\n                            {tool.category && (\n                              <p className=\"text-sm text-gray-500 capitalize\">{tool.category}</p>\n                            )}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(tool.id)}\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14513},"client/src/components/ServingAdjustmentDialog.tsx":{"content":"import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useLanguage } from '@/contexts/LanguageContext';\nimport { Recipe } from '@shared/schema';\n\ninterface ServingAdjustmentDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  recipe: Recipe;\n  selectedRecipes: number[];\n  onConfirm: (people: number, days: number) => void;\n}\n\nexport function ServingAdjustmentDialog({ \n  isOpen, \n  onClose, \n  recipe, \n  selectedRecipes, \n  onConfirm \n}: ServingAdjustmentDialogProps) {\n  const { t, language } = useLanguage();\n  const [people, setPeople] = useState(4);\n  const [days, setDays] = useState(1);\n\n  const handleConfirm = () => {\n    onConfirm(people, days);\n    onClose();\n  };\n\n  const getOriginalServings = () => {\n    if (selectedRecipes.length === 1 && selectedRecipes[0] === 0) {\n      return recipe.servings || 4;\n    }\n    if (selectedRecipes.length === 1 && selectedRecipes[0] > 0) {\n      const additionalRecipe = recipe.additionalRecipes?.[selectedRecipes[0] - 1];\n      return additionalRecipe?.servings || 4;\n    }\n    return 4; // Default when multiple recipes selected\n  };\n\n  const originalServings = getOriginalServings();\n  const totalServingsNeeded = people * days;\n  const multiplier = totalServingsNeeded / originalServings;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\" data-testid=\"serving-adjustment-dialog\">\n        <DialogHeader>\n          <DialogTitle className=\"text-lg font-semibold\">\n            {language === 'ar' ? 'تعديل حجم الوجبة' : 'Adjust Serving Size'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n            {language === 'ar' \n              ? `الوصفة الأصلية تكفي ${originalServings} أشخاص`\n              : `Original recipe serves ${originalServings} people`\n            }\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"people\" className=\"text-sm font-medium\">\n                {language === 'ar' ? 'عدد الأشخاص' : 'Number of People'}\n              </Label>\n              <Input\n                id=\"people\"\n                type=\"number\"\n                min=\"1\"\n                value={people}\n                onChange={(e) => setPeople(parseInt(e.target.value) || 1)}\n                data-testid=\"input-people\"\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"days\" className=\"text-sm font-medium\">\n                {language === 'ar' ? 'عدد الأيام' : 'Number of Days'}\n              </Label>\n              <Input\n                id=\"days\"\n                type=\"number\"\n                min=\"1\"\n                value={days}\n                onChange={(e) => setDays(parseInt(e.target.value) || 1)}\n                data-testid=\"input-days\"\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-md\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-blue-900 dark:text-blue-100\">\n                {language === 'ar' ? 'الحساب:' : 'Calculation:'}\n              </div>\n              <div className=\"text-blue-700 dark:text-blue-200\">\n                {language === 'ar' \n                  ? `${people} أشخاص × ${days} أيام = ${totalServingsNeeded} وجبة`\n                  : `${people} people × ${days} days = ${totalServingsNeeded} servings`\n                }\n              </div>\n              <div className=\"text-blue-700 dark:text-blue-200\">\n                {language === 'ar' \n                  ? `المضاعف: ×${multiplier.toFixed(1)}`\n                  : `Multiplier: ×${multiplier.toFixed(1)}`\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex gap-2\">\n          <Button \n            variant=\"outline\" \n            onClick={onClose}\n            data-testid=\"button-cancel-serving\"\n          >\n            {language === 'ar' ? 'إلغاء' : 'Cancel'}\n          </Button>\n          <Button \n            onClick={handleConfirm}\n            data-testid=\"button-confirm-serving\"\n            className=\"bg-blue-500 hover:bg-blue-600\"\n          >\n            {language === 'ar' ? 'إضافة للقائمة' : 'Add to List'}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4794}},"version":1}